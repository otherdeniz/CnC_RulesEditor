{
	"CommonGeneral": [
		{"Key": "EngineerCaptureLevel", "Category": "Multi Engineer", "Default": "1.0", "Description": "(float - percent) If the building\u2019s health is equal to or below this percentage of its strength it can be captured by an engineer instead of being damaged."},
		{"Key": "EngineerDamage", "Category": "Multi Engineer", "Default": "0.0", "Description": "(float - percent) If the building cannot be captured the engineer will damage it by this amount of its full health."},
		{"Key": "EngineerAlwaysCaptureTech", "Category": "Multi Engineer", "Default": "yes", "Description": "Specifies whether tech buildings can be captured no matter what their current health status is."},
		{"Key": "BountyEnablers", "Description": "Bounty will be enabled only after a building of a type in this list is owned by the player. If the list is empty, bounty will always be enabled.. Defaults to none.", "LookupType": "BuildingTypes", "MultipleValues": true},
		{"Key": "ChronoInfantryCrush", "Description": "(boolean) If set to no, infantry will die when being chronoshifted onto tanks instead of destroying the tanks. Defaults to yes."},
		{"Key": "EnemyInsignia", "Description": "(boolean) Whether insignia will be shown for enemy players by default. Each unit type can override this value. Defaults to yes."},
		{"Key": "DropPodTrailer", "Description": "(AnimationType) The animation used as smoke trailer for Drop Pods. Defaults to SMOKEY."},
		{"Key": "DropPodTypes", "Description": "The types to randomly choose from when spawning units for the Drop Pod super weapon. Each type has an equal chance of being selected. You can add types more than once. Only infantry is supported. Defaults to none, Firestorm uses an equivalent E1,E2.", "LookupType": "InfantryTypes", "MultipleValues": true},
		{"Key": "DropPodMinimum", "Description": "(integer) The minimum number of Drop Pods being created. Defaults to 0, Firestorm uses 5."},
		{"Key": "DropPodMaximum", "Description": "(integer) The maximum number of Drop Pods being created. Defaults to 0, Firestorm uses 8."},
		{"Key": "HunterSeekerDetonateProximity", "Description": "(integer) Distance to target in leptons below which the Hunter Seeker will detonate. Defaults to 0, Tiberian Sun uses 150."},
		{"Key": "HunterSeekerDescendProximity", "Description": "(integer) Distance to target in leptons where the Hunter Seeker will start to descend. Defaults to 0, Tiberian Sun uses 700."},
		{"Key": "HunterSeekerAscentSpeed", "Description": "(integer) Speed value used while rising to a higher flight level. Defaults to 0, Tiberian Sun uses 40."},
		{"Key": "HunterSeekerDescentSpeed", "Description": "(integer) Speed value used while going down to a lower flight level. Defaults to 0, Tiberian Sun uses 50."},
		{"Key": "HunterSeekerEmergeSpeed", "Description": "(integer) Speed value used when ascending from the launch site. Defaults to 0, Tiberian Sun uses 6."},
		{"Key": "PrerequisiteXAlternate", "Description": "A list of types that alternatively satisfy this requirement if player does not own a building from the [General]\u25baPrerequisiteX= list. Replace X with a key from [GenericPrerequisites], first character upper case, all others lower case. For instance, NAVALYARD from above would become Navalyard. Note Using BuildingTypes is not supported and adding them here might give unexpected results. For example, upgrades will not work.", "LookupType": "TechnoTypes", "MultipleValues": true},
		{"Key": "AIFriendlyDistance", "Description": "(integer - cells) Cell distance the AI will use for gathering outside the owning player\u2019s base using script action 54. Defaults to [General]\u25baAISafeDistance."},
		{"Key": "UnitsUnsellable", "Description": "(boolean) Whether units are by default Unsellable=yes and thus not sellable at UnitSell=yes docking structures. Defaults to no."},
		{"Key": "TeamRetaliate", "Description": "(boolean) Whether teams are allowed to retaliate if a member is attacked and not killed immediately. Defaults to no."},
		{"Key": "TypeSelectUseDeploy", "Description": "(boolean) Whether the types in DeploysInto and UndeploysInto should be included for selection automatically. Defaults to yes. Note If you set this to no, Slave Miners, Tick Tanks and the like will differentiate between their deployed and undeployed forms. You will have to manually set GroupAs on the groups you want to keep."},
		{"Key": "EnemyWrench", "Description": "(boolean) Whether players not allied with the owning player can see the repair wrench animation playing if the building is click repaired. Observers can always see the wrench animation. Defaults to yes. Note The wrench animation will not show if a building is being attacked by a temporal weapon or an enemy building is cloaked."},
		{"Key": "RepairStopOnInsufficientFunds", "Description": "(boolean) Whether repairing will automatically be stopped when the owning player has insufficient funds. If no, repairing mode will not be turned off. The wrench will still be visible, even though the building is no longer actively repaired. Repairing will resume when the player gains more funds. This only affects human players. Defaults to yes."},
		{"Key": "ReturnStructures", "Description": "(boolean) Whether structures will by default return to the civilian side when a player is defeated or giving up. Defaults to no."},
		{"Key": "TogglePowerAllowed", "Description": "(boolean) Whether Toggle Power can be used. Defaults to no."},
		{"Key": "TogglePowerDelay", "Description": "(integer - frames) Defines the delay between power checks. This makes AI players not respond immediately to power level changes. Values less than 0 deactivate this logic. Defaults to 45."},
		{"Key": "Degrade.Enabled", "Description": "(boolean) Whether structures are damaged in intervals defined by DamageDelay when a player has low power. Defaults to no."},
		{"Key": "Degrade.Percentage", "Description": "(double - percentage) The health above which this building will continue to degrade during low power situations. Buildings with health equal to or below this will not degrade further. Defaults to [AudioVisual]\u25baConditionYellow."},
		{"Key": "Degrade.AmountNormal", "Description": "(integer - hitpoints) The damage caused to buildings with Power equal to or greater than 0 in low power situations. Defaults to 0."},
		{"Key": "Degrade.AmountConsumer", "Description": "(integer - hitpoints) The damage caused to buildings with Power less than 0 in low power situations. Defaults to 1."},
		{"Key": "CloakHeight", "Description": "(integer) The height below which units are cloaked by Cloak Generator buildings. Units above this height will not be affected (though they can still self-cloak). Defaults to [General]\u25baHoverHeight. Note Yuri\u2019s Revenge defaulted to 0."},
		{"Key": "StartInMultiplayerUnitCost", "Description": "(integer - credits) The fixed amount of credits for one average unit. If not set, the game will use the method described above. In this case, Ares will now output the inferred average unit cost into the log file."},
		{"Key": "OverlayExplodeThreshold", "Description": "(integer) Only if the damage to a cell is higher than this does an overlay with Explodes=yes explode. Below this value, the overlay stays intact. Defaults to 0."},
		{"Key": "TiberiumDamageEnabled", "Description": "(boolean) Whether tiberium damages units that are not tiberium proof. Required for the following tags to work. Defaults to no."},
		{"Key": "TiberiumTransmogrify", "Description": "(integer - percent) Chance of which a unit dying of tiberium damage transforms into a [General]\u25baSmallVisceroid. Defaults to 0."},
		{"Key": "TiberiumHealEnabled", "Description": "(boolean) Whether tiberium is allowed to heal units. Required for the following tags to work. Defaults to no."},
		{"Key": "TiberiumHeal", "Description": "(float - minutes) The interval between healing steps being applied in minutes. Defaults to 1.13333 (once each 68 seconds)."},
		{"Key": "Message.SilosNeeded", "Description": "(csf label) Set this to a text that shall be printed whenever the Silos Needed warning occurs. You cannot unset this later. If you want to disable this message in a game mode or map, you will have to a label of an empty text. Defaults to no message."},
		{"Key": "DamageAirConsiderBridges", "Description": "(boolean) Whether a warhead detonating above a bridge will consider the bridge\u2019s height for finding out whether units in air are to be damaged. Defaults to no. If no, a warhead detonating on a bridge will be considered to be four levels (416 leptons) high in the air, if yes, it will be 0 leptons above the ground and thus by default not trigger damaging units in the air."},
		{"Key": "DamageToFirestormDamageCoefficient", "Description": "(double - multiplier) The multiplier for the damage dealt to active Firestorm Walls to convert hitpoints to frames to subtract from the Firestorm Defense Super Weapon\u2019s change time. Higher values reduce remaining active time faster. Defaults to 0.0. Note Tiberian Sun defaulted to 0.1, but Ares did not have this feature and just nullified all damage. This is what a value of 0.0 still does."}
	],

	"Sides": [
		{"Key": "Crew", "LookupType": "InfantryTypes", "Description": "The InfantryType that is spawned as a survivor when objects (with Crewed=yes set) owned by this side are destroyed (or, in the case of buildings, sold)."},
		{"Key": "Engineer", "LookupType": "InfantryTypes", "Description": "The InfantryType that has a chance to be spawned when buildings with Factory=BuildingType owned by this side are destroyed or sold. Defaults to [General]->Engineer."},
		{"Key": "Technician", "LookupType": "InfantryTypes", "Description": "The InfantryType that has a chance to be spawned when armed objects owned by this side are destroyed or sold. Defaults to [General]->Technician."},
		{"Key": "DefaultDisguise", "LookupType": "InfantryTypes", "Description": "Default InfantryType that disguisable infantry will be disguised as when first created."},
		{"Key": "SurvivorDivisor", "Description": "(integer) An object\u2019s refund amount is divided by this number to determine how many survivors will be spawned when this object is destroyed (or, in the case of buildings, sold)."},
		{"Key": "AI.BaseDefenses", "LookupType": "BuildingTypes", "MultipleValues": true, "Description": "List of base defense buildings that the AI can build."},
		{"Key": "AI.BaseDefenseCounts", "Description": "(list of integers) The maximum amount of base defense building that the AI can build. (listed as AI difficulties: hard, medium, easy) Defaults to [General]->AlliedBaseDefenseCounts for GDI (Allied), [General]->SovietBaseDefenseCounts for Nod (Soviet), and [General]->ThirdBaseDefenseCounts for ThirdSide (Yuri)."},
		{"Key": "GivesBounty", "Description": "(boolean) Whether this country is eligible for giving bounty. If no, killing units and structures of this country will not give any bounty. Defaults to yes."},
		{"Key": "CanBeDriven", "Description": "(boolean) Whether units owned by this country can be captured by CanDrive=yes infantry. This can be used to place units owned by neutral countries on the map without them being capturable. Defaults to MultiplayPassive."},
		{"Key": "Degrades", "Description": "(boolean) Whether buildings owned by this country degrade in low power situations. Defaults to no for MultiplayPassive=yes, to yes otherwise."},
		{"Key": "AI.PowerPlants", "Description": "A list of buildings that the AI will treat as this country\u2019s power plants. Defaults to [General]\u25baGDIPowerPlant for the first side, to [General]\u25baThirdPowerPlant for the third side, and to [General]\u25baNodRegularPower and [General]\u25baNodAdvancedPower for the second side and all other sides. Note There has to be at least one building in this list that always satisfies prerequisites.", "LookupType": "BuildingTypes", "MultipleValues": true},
		{"Key": "ParaDrop.Types", "Description": "The units that will be paradropped by Type=ParaDrop super weapons (such as the one normally provided by a Tech Airport) for this country. Defaults to the corresponding side\u2019s ParaDrop.Types=. Note The original flags used to control the paradrop units only accept InfantryTypes. To include VehicleTypes in a paradrop you have to use the new ParaDrop.Types and ParaDrop.Num flags.", "LookupType": "TechnoTypes", "MultipleValues": true},
		{"Key": "ParaDrop.Num", "Description": "(integers) The quantity of each corresponding unit (listed against ParaDrop.Types ) that will be paradropped. Defaults to the corresponding side\u2019s ParaDrop.Num=."},
		{"Key": "ParaDrop.Aircraft", "Description": "The aircraft type that will be used to deliver paradrops from super weapons or by teams created by map actions. Defaults to the corresponding side\u2019s ParaDrop.Aircraft=.", "LookupType": "AircraftType"},
		{"Key": "Parachute.Anim", "Description": "This country\u2019s default parachute used if not overridden by a TechnoType. Defaults to the corresponding side\u2019s Parachute.Anim=.", "LookupType": "Animation"},
		{"Key": "VeteranBuildings", "Description": "All buildings in this list start as veteran for this country and, if available, veteran cameos are displayed in the sidebar.", "LookupType": "BuildingTypes", "MultipleValues": true},
		{"Key": "HunterSeeker", "Description": "The unit used as default Hunter Seeker for the Hunter Seeker super weapon. Replaces [General]\u25baGDIHunterSeeker and [General]\u25baNodHunterSeeker from Tiberian Sun. Set this to a voxel VehicleType with Fly locomotor as specified under Hunter Seeker. Defaults to none.", "LookupType": "VehicleType"},
		{"Key": "CampaignScore.Background", "Description": "(filename, *including* the .shp extension) A 632x568 image used as the background. Uses the palette defined as CampaignScore.Palette. Defaults to ASCRBKMD.SHP, SSCRBKMD.SHP or SYCRBKMD.SHP for sides 1, 2 and all others respectively."},
		{"Key": "CampaignScore.Transition", "Description": "(filename, *including* the .shp extension) An image used as a transition from the looping animation to the static background image. Played backwards for the opposite case. Uses the palette defined as CampaignScore.Palette. Defaults to ASCRTMD.SHP, SSCRTMD.SHP or SYCRTMD.SHP for sides 1, 2 and all others respectively."},
		{"Key": "CampaignScore.Animation", "Description": "(filename, *including* the .shp extension) An image played as a loop after the introductory transition until the dialog is closed. The first 29 frames are played once, the remaining frames are then looped. Uses the palette defined as CampaignScore.Palette. Defaults to ASCRAMD.SHP, SSCRAMD.SHP or SYCRAMD.SHP for sides 1, 2 and all others respectively."},
		{"Key": "CampaignScore.Palette", "Description": "(filename, *including* the .pal extension) The palette to draw all animations on the campaign score screen. Defaults to ASCORE.PAL, SSCORE.PAL or YSCORE.PAL for sides 1, 2 and all others respectively."},
		{"Key": "CampaignScore.UnderParTheme", "Description": "(theme id) The theme playing for this side when a player finishes a campaign mission quicker than the defined par time. Defaults to SCORE."},
		{"Key": "CampaignScore.OverParTheme", "Description": "(theme id) The theme playing for this side when a player finishes a campaign mission slower than the defined par time. Defaults to SCORE."},
		{"Key": "MultiplayerScore.Background", "Description": "(filename, *including* the .shp extension) A 632x568 image used as the background. Uses the palette defined as MultiplayerScore.Palette. Defaults to MPASCRNL.SHP, MPSSCRNL.SHP or MPYSCRNL.SHP for sides 1, 2 and all others respectively."},
		{"Key": "MultiplayerScore.Palette", "Description": "(filename, *including* the .pal extension) The palette to draw the background of the multiplay score screen. Defaults to MPASCRN.PAL, MPSSCRN.PAL or MPYSCRN.PAL for sides 1, 2 and all others respectively."},
		{"Key": "MultiplayerScore.Bars", "Description": "(filename, *including* the .pcx extension) The filename used as a pattern for the ten bars of 440x36 on the multiplayer score screen, two captions and up to eight players. Can contain ~~, which are replaced with a number from 01 to 10. Defaults to mpascrnlbar~~.pcx, mpsscrnlbar~~.pcx or mpyscrnlbar~~.pcx for sides 1, 2 and all others respectively."},
		{"Key": "MultiplayerScore.WinTheme", "Description": "(theme id) The theme playing for this side when a player is victorious in a multiplayer match. Defaults to SCORE."},
		{"Key": "MultiplayerScore.LoseTheme", "Description": "(theme id) The theme playing for this side when a player is defeated in a multiplayer match. Defaults to SCORE."},
		{"Key": "GraphicalText.Image", "Description": "(filename, *including* the .shp extension) The graphic file used as overlay to show whether a mission or match has been won or lost. The image is centered in the viewport and rendered in the palette defined as GraphicalText.Palette. Defaults to GRFXTXT.SHP."},
		{"Key": "GraphicalText.Palette", "Description": "(filename, *including* the .pal extension) The palette the graphical text image uses. The banner is actually rendered in the theater\u2019s palette and this palette is used to find the best match for the colors. Defaults to GRFXTXT.PAL."},
		{"Key": "StartInMultiplayer.Types", "Description": "The custom list of potential units to start with in multiplayer games. If not set, the game selects the types by using AllowedToStartInMultiplayer. Only InfantryTypes and VehicleTypes are supported. Use <none> to disable starting units for this country. Note It is now supported to have no starting infantry. The game will no longer crash.", "LookupType": "TechnoTypes", "MultipleValues": true},
		{"Key": "StartInMultiplayer.WithConst", "Description": "(boolean) Whether this country shall start with the first buildable building from BuildConst instead of a unit from BaseUnit when starting a multiplayer match. Defaults to no."},
		{"Key": "MenuText.Status", "Description": "(CSF label) Brief description of the country, displayed in the status bar of the country selection screen when the player mouse-overs that country in the country selection drop-down list."},
		{"Key": "ListIndex", "Description": "(integer) Specifies which position this country should appear in the country dropdown list. If two or more countries use the same ListIndex, the order is defined by their appearance in the [Countries] enumeration. Countries with negative values will not appear in the dropdown list; you can use this to effectively hide countries without having to change the [Countries] list and thus without risking game crashes. To also prevent such countries from being selected randomly, set RandomSelectionWeight=0. Defaults to 100."},
		{"Key": "RandomSelectionWeight", "Description": "(integer) Specifies how likely it is that this country will be randomly selected when a player chooses \u2018Random\u2019. The probability of this country being picked is calculated by dividing this country\u2019s RandomSelectionWeight value by the sum of all Multiplay=yes countries\u2019 RandomSelectionWeight values. Defaults to 1."},
		{"Key": "AIRandomSelectionWeight", "Description": "(integer) The random selection weight used for AI players. This can be used to make it more or less likely for AI players to pick this country randomly. Defaults to RandomSelectionWeight."},
		{"Key": "File.Flag", "Description": "(filename, *including* the .pcx extension) The PCX file to use for the country\u2019s flag, in the format \u201cfilename.pcx\u201d. If the flag is not set or the file does not exist, a warning is written into the debug log."},
		{"Key": "File.ObserverBackground", "Description": "(filename, *including* the .pcx or .shp extension) The SHP or PCX file to use for the country\u2019s background in observer mode, in the format \u201cfilename.shp\u201d or \u201cfilename.pcx\u201d. The size should be 121x96. The SHP file will be drawn using observer.pal."},
		{"Key": "File.ObserverFlag", "Description": "(filename, *including* the .pcx or .shp extension) The SHP or PCX file to use for the country\u2019s flag in observer mode, in the format \u201cfilename.shp\u201d or \u201cfilename.pcx\u201d."},
		{"Key": "File.ObserverFlagAltPalette", "Description": "(boolean) If yes, draw SHP file File.ObserverFlag= using yrii.pal. Otherwise the SHP file will be drawn using observer.pal."},
		{"Key": "File.LoadScreen", "Description": "(filename, *including* the .shp extension) The SHP file to use for the country\u2019s loading screen, in the format \u201cfilename.shp\u201d."},
		{"Key": "File.LoadScreenPAL", "Description": "(filename, *including* the .pal extension) The palette file to use for the country\u2019s loading screen, in the format \u201cfilename.pal\u201d."},
		{"Key": "LoadScreenText.Name", "Description": "(CSF label) Name of the country, displayed on the loading screen (where a map of the country is usually shown). For example, LoadScreenText.Name=Name:Americans."},
		{"Key": "LoadScreenText.SpecialName", "Description": "(CSF label) Name of the country\u2019s special weapon, displayed on the loading screen. For example, LoadScreenText.SpecialName=Name:apara."},
		{"Key": "LoadScreenText.Brief", "Description": "(CSF label) Description of the country and its special weapon, displayed on the loading screen. For example, LoadScreenText.Brief=loadbrief:usa."},
		{"Key": "LoadScreenText.Color", "Description": "(Color scheme) Text on the multiplayer loading screens for this country will be drawn using this color from the [Colors] list. Defaults to AlliedLoad for the first side, to SovietLoad for the second side, and to YuriLoad or Purple for the third side."},
		{"Key": "LoadingTheme", "Description": "(theme id) The theme playing for a player of this country while the multiplayer match is loading. Defaults to [Side]\u25baLoadingTheme."},
		{"Key": "File.Taunt", "Description": "(filename, *including* the Taunts\u0000 directory and .wav extension) Path of the files to use for the country\u2019s taunts, in the format \u201cTaunts\\filename~~.wav\u201d. The filename specified must include \u201c ~~ \u201d, which will be substituted for the taunt ID (01 through 08). For example, File.Taunt=Taunts\u0000\\tauam~~.wav will make the game load taunts tauam01.wav through tauam08.wav."},
		{"Key": "Sidebar.MixFileIndex", "Description": "(integer) The MIX file number to use for the sidebar (e.g. 1 for the Allied sidec01.mix, 2 for the Soviet sidec02.mix)."},
		{"Key": "Sidebar.YuriFileNames", "Description": "(boolean) Whether or not to use the Yuri sidebar file names (sidec02md.mix and the Yuri-specific files within that MIX)."},
		{"Key": "ToolTipColor", "Description": "(R,G,B) Interface text and border color for tool tips, the credits counter, and other UI elements. Defaults to 255,255,0 for sides Nod and ThirdSide, otherwise to 164,210,255."},
		{"Key": "MessageTextColor", "Description": "(Color scheme) The color scheme used for printing ingame messages triggered by map action 11. Defaults to the 6th color scheme for side Nod, the 13th color scheme for side ThirdSide, to 11th color scheme otherwise. In the unmodified game, the colors are DarkRed, DarkSky and DarkBlue respectively."},
		{"Key": "EVA.Tag", "Description": "(EVA Type) Name of the EVA Type tag to load from evamd.ini for this side\u2019s EVA announcer. Use none to disable EVA. Defaults to Russian for side Nod, to Yuri for side ThirdSide, to Allied otherwise. See EVA Types on how to define values that can be used here."}
	],

	"AllUnits": [
		{"Key": "Carryall.Allowed", "Description": "(boolean) Can this unit be picked up by a carryall? If not set, Organic=yes and NonVehicle=yes units cannot be picked up. If specified, Carryall.Allowed overrules those considerations. Currently it is not possible to \u201cunset\u201d this tag to use the default again. You have to set it explicitly. Note Units infected with a Parasite (Terror Drone/Squid) cannot be picked up."},
		{"Key": "PoweredBy", "Description": "Allows multiple powered units to exist, as well as allowing multiple buildings to provide power. Defaults to none.", "LookupType": "BuildingTypes", "MultipleValues": true},
		{"Key": "Passengers.BySize", "Description": "(boolean) Whether passengers will take up as much space in the cargo hold as their Size instead of taking up only one seat no matter the size of the object. If no, the transport can always contain up to Passengers units. Defaults to yes. Note SizeLimit is always respected. A too large unit will still not be able to enter."}
	],

	"AllMovingUnits": [
		{"Key": "AirRate", "Description": "(integer - number of frames) If higher than 0, defines after how many frames the unit\u2019s animation is to be advanced to the next frame when the unit is in air. AirRate takes precedence over WalkRate and IdleRate. 0 disables AirRate. Defaults to 0."},
		{"Key": "VoiceAirstrikeAttack", "Description": "(soundmd entry) Specifies the voice played when the airstrike is called in and the team enters the map. Defaults to AirstrikeAttackVoice."},
		{"Key": "VoiceAirstrikeAbort", "Description": "(soundmd entry) Specifies the voice played when the designator unit is killed before the aircraft had a chance to fire. Defaults to AirstrikeAbortSound."},
		{"Key": "AlternateTheaterArt", "Description": "(boolean) Specifies whether or not this SHP-based unit can have alternate art depending on the theater of the current map. For example, setting Image=JUNK and AlternateTheaterArt=yes on a unit will make the unit load artmd.ini section [JUNKA] on arctic, [JUNKD] on desert, and so on according to theater. If any of those sections do not exist then the unit will fall back to [JUNK]. So quite similar to AlternateArcticArt, just automatic and smarter. Defaults to no."},
		{"Key": "AttachEffect.Delay", "Description": "(integer - frames) Defines how many frames after the previous effect subsides the AttachEffect is recreated on the unit itself. Negative values do not renew the effect. Defaults to 0 (immediately)."},
		{"Key": "AttachEffect.InitialDelay", "Description": "(integer - frames) Defines the delay before creating the AttachEffect for the very first time. Subsequent delays are defined by AttachEffect.Delay. Use 0 to create effect immediately. Defaults to 0."},
		{"Key": "Bounty", "Description": "(boolean) Whether this object will be awarded bounty when destroying enemy units or structures either by firing at them or by crushing them. Defaults to no."},
		{"Key": "Bounty.Display", "Description": "(boolean) Whether enemy units and structures will display the amount of bounty awarded when destroyed by an object of this type. Defaults to [AudioVisual]\u25baBountyDisplay."},
		{"Key": "Bounty.Value", "Description": "(integer - credits) The amount rewarded as bounty if this becomes the victim of a bounty hunter. Can be negative to penalize the player. If set, resets the veterancy level specific values. Defaults to 0."},
		{"Key": "Bounty.EliteValue", "Description": "(integer - credits) The amount rewarded as bounty if an object with this veterancy is destroyed. Can be negative to penalize the player. Defaults to Bounty.Value."},
		{"Key": "BuildTime.Speed", "Description": "(double - minutes) The time in minutes it takes to produce an object which costs 1000 credits. Defaults to [General]\u25baBuildSpeed. Note If set, WallBuildSpeedCoefficient will not be applied to Wall=yes buildings any more, because BuildTime.Speed is taken as final value."},
		{"Key": "BuildTime.Cost", "Description": "(integer - credits) If set, the build time is calculated as if this item cost this much, instead of using actual Cost. Defaults to Cost."},
		{"Key": "BuildTime.LowPowerPenalty", "Description": "(double - multiplier) The penalty to apply to the build time in low power situations. Defaults to [General]\u25baLowPowerPenaltyModifier."},
		{"Key": "BuildTime.MinLowPower", "Description": "(double) The minimum production speed when power is low. The resulting low power modifier will not be lower than this. Defaults to [General]\u25baMinLowPowerProductionSpeed."},
		{"Key": "BuildTime.MaxLowPower", "Description": "(double) The maximum production speed when power is low. The resulting low power modifier will not be greater than this. Defaults to [General]\u25baMaxLowPowerProductionSpeed."},
		{"Key": "BuildTime.MultipleFactory", "Description": "(double - multiplier) The factor multiplied by the build time per additional factory of the same type. Defaults to [General]\u25baMultipleFactory."},
		{"Key": "CanPassiveAquire.Guard", "Description": "(boolean) Whether this unit can acquire targets on their own when in guard mode. If set to no, the unit will hold fire, but can be made to acquire own targets by putting it in area guard mode. Defaults to yes."},
		{"Key": "CanPassiveAquire.Cloak", "Description": "(boolean) Whether this unit can acquire targets on their own when the unit is cloakable and in guard mode. If set to no, the unit will hold fire if cloakable and in guard mode, but can be made to acquire own targets by putting it in area guard mode. CanPassiveAquire.Guard=no overrides this tag. Defaults to yes."},
		{"Key": "ImmuneToAbduction", "Description": "(boolean) Specifies whether the unit cannot be abducted. Only the conventional damage is dealt. Defaults to no."},
		{"Key": "PassengerTurret", "Description": "(boolean) If set to yes, this unit\u2019s turret will switch to the turret with the index equivalent to the number of passengers it holds. Defaults to no. 0 passengers footur.vxl 1 passenger footur1.vxl 5 passengers footur5.vxl Note In order to use this, you have to use YR\u2019s multi-turret logic, that is, you have to specify Turret=yes, an appropriate TurretCount, and you have to use the WeaponX flags to specify weapons."},
		{"Key": "Chronoshift.Allow", "Description": "(boolean) Specifies whether this unit is allowed to be affected by the Chronosphere super weapon. Otherwise it will be ignored. Defaults to yes."},
		{"Key": "Chronoshift.Crushable", "Description": "(boolean) If set to no, this unit can no longer be crushed by chronoshifting units onto it. Instead, the chronoshifting unit will be destroyed. Does not apply to BuildingType s. Defaults to yes."},
		{"Key": "CivilianEnemy", "Description": "(boolean) Whether this unit is considered an enemy when auto-acquiring a target. Enabling this prevents a unit of this type to be considered neutral in multiplayer matches. Defaults to no."},
		{"Key": "CrushDamage.Elite", "Description": "(integer - hitpoints) The damage dealt to the unit crushing this object. Defaults to 0. Note When the base tag is defined, it will always reset all previous veterancy values, and then re-read the veterancy values from the same file."},
		{"Key": "CrushDamage.Warhead", "Description": "The warhead used to deal crush damage when this unit is crushed. Defaults to [General]\u25baC4Warhead.", "LookupType": "Warhead"},
		{"Key": "Cursor.Move", "Description": "(mouse cursor) The cursor to use for representing the move action. Defaults to Move."},
		{"Key": "Cursor.NoMove", "Description": "(mouse cursor) The cursor to use for representing the no-move action. Defaults to NoMove."},
		{"Key": "Cursor.Deploy", "Description": "(mouse cursor) The cursor used for deploying actions. Defaults to Deploy."},
		{"Key": "Cursor.NoDeploy", "Description": "(mouse cursor) The cursor used to indicate a building cannot be deployed, passenger cannot be ejected, or an automatically undeploying infantry is currently deployed. Defaults to NoDeploy."},
		{"Key": "Cursor.Enter", "Description": "(mouse cursor) The enter cursor other objects get when hovering the mouse over an object of this type. Defaults to Enter."},
		{"Key": "Cursor.NoEnter", "Description": "(mouse cursor) The cursor other objects get when hovering the mouse over an object of this type while entering is not possible. This is used on full transports. Defaults to NoEnter."},
		{"Key": "Insignia.Elite", "Description": "(filename, excluding the .shp extension) For example, Insignia.Rookie=SAMPLE would display sample.shp as the insignia while the object is rookie. Defaults to PIPS."},
		{"Key": "InsigniaFrame.Elite", "Description": "(integer - frame) The frame used from the insignia shape. Set to -1 to use the default frame index."},
		{"Key": "Insignia.ShowEnemy", "Description": "(boolean) Whether insignia for a unit of this type will be shown for enemy players. Defaults to [General]\u25baEnemyInsignia."},
		{"Key": "Parachute.Anim", "Description": "(animation) Specifies the animation from artmd.ini to use as the unit\u2019s parachute when it is falling. If omitted, Parachute.Anim will default to PARACH. The SHP is expected to be in the unit palette."},
		{"Key": "Experience.FromPassengers", "Description": "(boolean) Allow OpenTopped=yes and Gunner=yes units to gain experience when a passenger kills an enemy. If this is no the unit only gets promoted when killing enemies itself. For gunners like the IFV this means the vehicle may not have any passengers to gain experience. Defaults to yes."},
		{"Key": "Experience.PromotePassengers", "Description": "(boolean) If an OpenTopped=yes or Gunner=yes unit is trainable and already elite,  the passenger shooting will get the experience instead. If this is no the additional experience will be lost as the vehicle is elite already. Defaults to no."},
		{"Key": "Experience.PassengerModifier", "Description": "(float - multiplier) If a kill gets credited to a passenger, the experience gain is multiplied by this value. Defaults to 100%."},
		{"Key": "Experience.FromAirstrike", "Description": "(boolean) If a kill gets credited to an aircraft that was called in by an air strike, the designator will get the experience instead of the actual aircraft. Defaults to no."},
		{"Key": "Experience.AirstrikeModifier", "Description": "(float - multiplier) If Experience.FromAircraft=yes is set on the designator of an airstrike (like Boris), the experience gain is multiplied by this value. Defaults to 100%."},
		{"Key": "Experience.MindControlSelfModifier", "Description": "(float - multiplier) If a mind-controlled unit kills an enemy, its controller gets this percentage of the experience the original killer can get (the amount before Experience.MindControlVictimModifier is applied). This additional experience is not subtracted from the experience gained by the original killer. Defaults to 0%."},
		{"Key": "Experience.MindControlVictimModifier", "Description": "(float - multiplier) If a mind-controlled unit kills an enemy, its gained experience is multiplied by this value. Use this for example to subtract the amount the unit\u2019s controller gets by having this value and Experience.MindControlSelfModifier sum up to 100%. Defaults to 100%."},
		{"Key": "Experience.SpawnOwnerModifier", "Description": "(float - multiplier) The percentage of experience the unit owning a spawn gains when the spawn kills an enemy. This tag has to be set on the spawner unit, not the spawn. Defaults to 0%."},
		{"Key": "Experience.SpawnModifier", "Description": "(float - multiplier) The percentage of experience a spawn of this unit gains when the spawn kills an enemy. This tag has to be set on the spawner unit, not the spawn. Defaults to 100%."},
		{"Key": "DamageSparks", "Description": "(boolean) Defines whether an object of this type should spawn spark particle systems defined by DamageParticleSystems. Defaults to Cyborg for InfantryTypes, to no otherwise."},
		{"Key": "DamageSmokeParticleSystems", "Description": "(ParticleSystems) Defines a list of ParticleSystems to randomly spawn from when an object is damaged into yellow or red health. You have to use this if you want to use ParticleSystems with BehavesLike set to other values than Smoke. Defaults to all DamageParticleSystems with BehavesLike=Smoke set."},
		{"Key": "DamageSparksParticleSystems", "Description": "(ParticleSystems) Defines a list of ParticleSystems to randomly spawn from when an object is in yellow or red health. You have to use this if you want to use ParticleSystems with BehavesLike set to other values than Spark. Defaults to all DamageParticleSystems with BehavesLike=Spark set."},
		{"Key": "DeployDir", "Description": "(integer - facing) The direction a unit will face when deploying. Valid values range from 0 for north to 7 for north west. Defaults to [General]\u25baDeployDir."},
		{"Key": "DigIn", "Description": "(animation) The optional animation used when this unit digs into the ground. Defaults to [AudioVisual]\u25baDig."},
		{"Key": "DigOut", "Description": "(animation) The optional animation used when this unit digs out of the ground. Defaults to [AudioVisual]\u25baDig."},
		{"Key": "DigInSound", "Description": "(sound entry) The optional sound played when this unit digs into the ground. Defaults to [AudioVisual]\u25baDigSound."},
		{"Key": "DigOutSound", "Description": "(sound entry) The optional sound played when this unit digs out of the ground. Defaults to [AudioVisual]\u25baDigSound."},
		{"Key": "Drain.Local", "Description": "(boolean) Whether this unit drains only the local power from its target building, or whether this building does not bring down the entire power grid of the owning player when drained. If any of the draining unit or the building drained have this set to yes, only the local power is drained. If both have this set to no, then the victim\u2019s entire power is drained. Defaults to no."},
		{"Key": "Drain.Amount", "Description": "(integer) The amount of power drained from a power plant of the victim player. Requires Drain.Local=yes on either the draining unit or the drained building. If positive, this is the maximum amount of power drained. If negative, this is the minimum amount of power drained. Defaults to 0. The start value is the victim building\u2019s Power, then the draining unit\u2019s Drain.Amount is applied, and finally the drained building\u2019s Drain.Amount."},
		{"Key": "FactoryPlant.Multiplier", "Description": "(double - multiplier) The effect of the respective CostBonus tag for this type is multiplied by this value to either increase, decrease, or nullify the effect. Fully supported values range from -1.0 to reverse the effect to 1.0 to not apply the effect. 0.0 nullifies the bonus. Defaults to 1.0. Note Values beyond 1.0 can potentially cause the cost to drop to zero, if the effect of the product of all cost bonuses is multiplied by a too large value. This is because the effect of this multiplier is linear."},
		{"Key": "FakeOf", "Description": "If set, this type is used to calculate the price for the health and veterancy selection Keyboard Commands. Defaults to none.", "LookupType": "TechnoType"},
		{"Key": "FallRate.Parachute", "Description": "(integer) The acceleration towards the ground applied each frame a parachuted unit is falling. Defaults to 1."},
		{"Key": "FallRate.NoParachute", "Description": "(integer) The acceleration towards the ground applied each frame a unit without parachute is falling. Defaults to 1."},
		{"Key": "FallRate.ParachuteMax", "Description": "(integer) The maximum speed a parachuted unit is falling with. Value has to be negative. Defaults to [General]\u25baParachuteMaxFallRate."},
		{"Key": "FallRate.NoParachuteMax", "Description": "(integer) The maximum speed a unit without parachute is falling with. Value has to be negative. Defaults to [General]\u25baNoParachuteMaxFallRate."},
		{"Key": "Gattling.Cycle", "Description": "(boolean) When the last Stage or EliteStage is completed, the counter will wrap around and restart with the first stage without the firing unit losing target. Requires IsGattling=yes. Defaults to no."},
		{"Key": "WeaponTurretIndexX", "Description": "(integer - turret index) The turret index used when WeaponX and EliteWeaponX are active, defined by IFVMode on the passenger. X is the number from 1 to WeaponCount. Defaults to -1. Note Note that WeaponX is 1-based while IFVMode is 0-based. For example IFVMode=4 activates Weapon5 and uses the turret index set as WeaponTurretIndex5."},
		{"Key": "WeaponUINameX", "Description": "(CSF label) If set, is used as tool tip for this Gunner=yes unit if weapon X is active. X is the number from 1 to WeaponCount. If not set, defaults to the original behavior."},
		{"Key": "Harvester.LongScan", "Description": "(integer - cells) Overrides the distance to consider for long scans. For Harvester=yes units, defaults to [General]\u25baTiberiumLongScan. For Slave Miners, defaults to [General]\u25baSlaveMinerLongScan."},
		{"Key": "Harvester.ShortScan", "Description": "(integer - cells) Overrides the distance to consider for short scans. For Harvester=yes units, defaults to [General]\u25baTiberiumShortScan. For Slave Miners, defaults to [General]\u25baSlaveMinerShortScan, and for Slaves defaults to [General]\u25baSlaveMinerSlaveScan."},
		{"Key": "VehicleThief.Allowed", "Description": "(boolean) Whether this VehicleType or AircraftType can be hijacked by vehicle thieves. Defaults to yes."},
		{"Key": "HunterSeeker.Ignore", "Description": "(boolean) Whether the Hunter Seeker will ignore targets of this type altogether, and not even randomly select them when no other target is eligible. Defaults to no."},
		{"Key": "InitialPayload.Types", "Description": "The types of the initial payload this object is created with. Types can be mentioned more than once, or the corresponding InitialPayload.Nums can be used to repeat a type. BuildingType s and AircraftType s are not valid. Buildings are only allowed to have InfantryType payload. Types themselves having initial payload are not supported, because this could create infinite loops.", "LookupType": "TechnoTypes", "MultipleValues": true},
		{"Key": "InitialPayload.Nums", "Description": "(integers) The optional numbers of times each type from InitialPayload.Types will be added. If this list contains fewer items than the InitialPayload.Types list, the last number is used as count for all following types. If this tag is not set, all counts are assumed to be 1."},
		{"Key": "KeepAlive", "Description": "(boolean) Whether an object of this type will keep the owning player alive, independent of DontScore= and Insignificant=. Defaults to yes for Insignificant=no and DontScore=no buildings, to no otherwise (including all units, infantry and aircraft). Note No matter this setting, VehicleType s contained in the [General]\u25baBaseUnit= list will always keep the player alive during Short Games. This might change in the future."},
		{"Key": "ProtectedDriver", "Description": "(boolean) Whether the driver of this vehicle cannot be killed, i.e. whether this vehicle is immune to KillDriver. Organic=yes and Natural=yes units are always immune to KillDriver. Defaults to no."},
		{"Key": "ProtectedDriver.MinHealth", "Description": "(double - percentage) The minimum health below which the driver of this unit can be killed. If the unit\u2019s health is above this, the driver cannot be killed. If KillDriver.KillBelowPercent is also defined on the warhead, the minimum of the two values is used, that is, this tag can make a unit more resistant against driver killing weapons. Defaults to 0.0 if ProtectedDriver=yes, to 1.0 otherwise."},
		{"Key": "CanDrive", "Description": "(boolean) Whether this InfantryType can act as the driver of vehicles whose driver has been killed, effectively reclaiming the vehicle. If the vehicle requires an Operator the infantry driver turns the unit and enters as passenger that can be ejected later, otherwise the driver is swallowed, becoming the permanent driver of the vehicle. Defaults to no."},
		{"Key": "CanBeDriven", "Description": "(boolean) Whether this unit can be reclaimed by a driver. If no, this unit cannot be captured by a driver after the original driver has been killed. If yes, ownership and other still might still prevent the unit from being captured. Defaults to yes."},
		{"Key": "EVA.Lost", "Description": "(evamd entry) The message played when a unit or strucure of this type is destroyed. Use none to disable the report. Defaults to none for structures, to EVA_UnitLost otherwise."},
		{"Key": "NoManualFire", "Description": "(boolean) Whether players may not select targets for this type of object manually. If enabled, units will have to rely on auto-targeting and retaliation rules. Defaults to no."},
		{"Key": "NoManualUnload", "Description": "(boolean) Whether this vehicle or aircraft is disallowed to eject its passengers. If enabled, the owning player will not get deploy or no-deploy cursors. Defaults to no."},
		{"Key": "NoManualEnter", "Description": "(boolean) Whether units will not get an enter or no-enter cursor when on this object. If yes, the select cursor is used, as if this unit is not a transport. Defaults to no."},
		{"Key": "NoAmmoWeapon", "Description": "(integer) The weapon index to switch to when there is no ammo left. This will override the normal weapon selection and only allow this weapon to be selected. Valid values 0 for the primary weapon and 1 for the secondary. Use -1 to not switch weapons. Defaults to -1. Note This tag cannot override the DeployFireWeapon enabled by DeployFire=yes on VehicleTypes and InfantryTypes."},
		{"Key": "NoAmmoAmount", "Description": "(integer) If the current ammo is equal to or below this value, the NoAmmoWeapon will be used. Defaults to 0."},
		{"Key": "OmniCrusher.Aggressive", "Description": "(boolean) Whether or not a unit should try to crush its target aggressively. If no, the unit will not try to come as close as possible to the target to finally crush it. Requires OmniCrusher=yes. Defaults to yes. Note Only supported if OmniCrusher=yes is set. The default might change in a later version."},
		{"Key": "Operator", "Description": "Specifies a list of InfantryType s and VehicleType s of which at least one unit must be among the passengers before this object will function. If \u201c _ANY_ \u201d (sans quotes) is specified, then it does not matter which passenger is inside, as long as any is. Use none to remove the requirement of having an operator. Defaults to none.", "LookupType": "TechnoTypes", "MultipleValues": true},
		{"Key": "Passengers.Allowed", "Description": "The list of allowed passenger types. If this contains at least one type, all other types are not allowed to enter this object. If you want to prevent all units from entering, set this to either a dummy unit or a BuildingType.", "LookupType": "TechnoTypes", "MultipleValues": true},
		{"Key": "Passengers.Disallowed", "Description": "The list of types that are not allowed to enter this object.", "LookupType": "TechnoTypes", "MultipleValues": true},
		{"Key": "Pip", "Description": "(integer) Frame index in the pips file to use as pip image. Valid values range from 0 to the pip file\u2019s frame count - 1. Note If the tag is read as integer and the value is out of bounds, no error is logged in debug.log."},
		{"Key": "Prerequisite.RequiredTheaters", "Description": "(theater names) The map theaters in which the type is available. Defaults to all theaters. For example, if only the SNOW theater were specified then the type would only be available on arctic maps. This allows you to implement, for example, the AlternateArcticArt functionality used on the Navy SEAL, but for all types and all theaters (however this may present challenges for your AI). The theater names are: TEMPERATE - most maps SNOW - arctic/snowy maps URBAN - some city maps DESERT - some desert maps, older maps use Temperate LUNAR - Soviet Mission 6 NEWURBAN - most YR urban maps Note PrerequisiteOverride does not override Prerequisite.RequiredTheaters."},
		{"Key": "Prerequisite.Negative", "Description": "The buildings that preclude construction of the type. If the player owns one or more of the buildings on this list then the type will not be available. Defaults to none. Note PrerequisiteOverride does not override Prerequisite.Negative.", "LookupType": "BuildingTypes", "MultipleValues": true},
		{"Key": "Prerequisite.Lists", "Description": "(integer) Specifies how many extra Prerequisite lists complimentary to the one default list are available. Defaults to 0."},
		{"Key": "Prerequisite.List#", "Description": "(BuildingTypes ) The BuildingTypes required to satisfy this prerequisite list. Each list is checked on its own, and if any list is satisfied, the Prerequisite requirement is satisfied. Note Prerequisite.List0, if specified, overrides the existing Prerequisite flag."},
		{"Key": "Prerequisite.StolenTechs", "Description": "(integers) The list of stealable technology types that must be stolen before this object can be built. See Stolen Technology for more information."},
		{"Key": "FactoryOwners", "Description": "(houses) The list of countries whose factories can build this object. If empty, every country is allowed to build this object. Otherwise, players need to own at least one factory built by a country in this list or the plans of at least one of these countries to produce it."},
		{"Key": "FactoryOwners.Forbidden", "Description": "(houses) The list of countries whose factories cannot build this object. Players owning only factories built by countries in this list and only having plans of these countries are prevented from producing it."},
		{"Key": "Promote.VeteranSound", "Description": "(sound) The sound played when a unit of this type is promoted to veteran. Defaults to [AudioVisual]\u25baUpgradeVeteranSound."},
		{"Key": "Promote.EliteSound", "Description": "(sound) The sound played when a unit of this type is promoted to elite. Defaults to [AudioVisual]\u25baUpgradeEliteSound."},
		{"Key": "Promote.VeteranFlash", "Description": "(integer - frames) The number of frames a unit or structure of this type flashes when promoted to veteran. Defaults to [AudioVisual]\u25baVeteranFlashTimer."},
		{"Key": "Promote.EliteFlash", "Description": "(integer - frames) The number of frames a unit or structure of this type flashes when promoted to elite. Defaults to [AudioVisual]\u25baEliteFlashTimer."},
		{"Key": "EVA.VeteranPromoted", "Description": "(EVA message) The message played when a unit or structure of this type is promoted to veteran level. Defaults to EVA_UnitPromoted."},
		{"Key": "EVA.ElitePromoted", "Description": "(EVA message) The message played when a unit or structure of this type is promoted to elite level. Defaults to EVA_UnitPromoted."},
		{"Key": "Promote.IncludePassengers", "Description": "(boolean) Whether all Trainable=yes passengers will be set to the same rank if the rank of this transport unit changes. Defaults to no. Note The passengers\u2019 veterancy is discarded when the vehicle is promoted. This should not be used on manually controllable transports, because they could degrade elite passengers to veterans, for example."},
		{"Key": "RadarJamRadius", "Description": "(integer - radius in cells) Specifies the radius around the jamming object within structures with Radar=yes or SpySat=yes will be jammed."},
		{"Key": "RadialIndicatorRadius", "Description": "(integer - cells) Overrides the radius of the radial indicator for this unit or structure. Requires HasRadialIndicator=yes. The default is determined by the game. Note Units only support non-sweeping, non-concentric radial indicators."},
		{"Key": "ReloadAmount", "Description": "(integer) The number of rounds restored after each reload interval. Negative values are supported. Defaults to 1."},
		{"Key": "EmptyReloadAmount", "Description": "(integer) The number of rounds restored after reload interval when there is no ammo left. If 0 or negative, the unit will not reload. This does not require EmptyReload to be set. Defaults to ReloadAmount."},
		{"Key": "CanBeReversed", "Description": "(boolean) Allows the unit to be reverse-engineered. Defaults to yes."},
		{"Key": "ReversedAs", "Description": "The optional type to override what a unit is reversed as. If not set, uses the actual unit type. Supports BuildingType s. Use none to reset. Defaults to none.", "LookupType": "TechnoType"},
		{"Key": "SelfHealing.Rate", "Description": "(double - minutes) The minutes between applying the self heal. Defaults to [General]\u25baRepairRate."},
		{"Key": "SelfHealing.Max", "Description": "(double - percentage) The health level this object is restored to by self healing. The health will be capped at this percentage of the object\u2019s Strength. If defined, overrides the veterancy specific tags below. Defaults to 100%."},
		{"Key": "SelfHealing.EliteMax", "Description": "(double - percentage) The health level this object is restored to by self healing, depending on its veterancy level. These settings are fully independent of each other. Defaults to SelfHealing.Max."},
		{"Key": "SelfHealing.Amount", "Description": "(integer - hitpoints) The amount of hitpoints restored when self healing. Cannot be less than 0. If defined, overrides the veterancy specific tags below. Defaults to 1."},
		{"Key": "SelfHealing.EliteAmount", "Description": "(integer - hitpoints) The amount of hitpoints restored when self healing, depending on its veterancy level. These settings are fully independent of each other. Cannot be less than 0. Defaults to SelfHealing.Amount."},
		{"Key": "SelfHealing.CombatDelay", "Description": "(integer - frames) Defines how long after a damaging attack a unit will not be able to self heal. Healing weapons do not trigger this delay. Use 0 to disable this. Defaults to 0."},
		{"Key": "Unsellable", "Description": "(boolean) Whether this unit can be sold at UnitSell=yes docking structures. Defaults to [General]\u25baUnitsUnsellable=."},
		{"Key": "Survivor.Side#", "Description": "The InfantryType that can emerge from this object as a survivor when the object was owned by the corresponding side. Use to <none> to reset to default. Defaults to the owning side\u2019s Crew. Quickstart For example, Survivor.Side0=E1 would cause the spawned survivor (if any) to be a GI when the destroyed unit was owned by an Allied player at the time of destruction.", "LookupType": "InfantryType"},
		{"Key": "Crew.TechnicianChance", "Description": "(integer - percent between 0 and 100) The chance the owning side\u2019s Technician is spawned instead of an ordinary crew member. Defaults to 15 for BuildingTypes with Primary= set, to 0 otherwise. Note Yuri\u2019s Revenge also ejects Technician from units with Primary= set. Previous versions of Ares did not, so the default value has been changed so there is no difference to previous versions. If you want to eject Technician from units, you have to manually set Crew.TechnicianChance."},
		{"Key": "TurretROT", "Description": "(integer) Defines the rate of turn for the turret. Valid values range from 0 to 127. Defaults to ROT."},
		{"Key": "Promote.VeteranType", "Description": "If set, the unit converts into this type when being promoted to veteran rank. Defaults to none.", "LookupType": "TechnoType"},
		{"Key": "Promote.EliteType", "Description": "If set, the unit converts into this type when being promoted to elite rank. Defaults to none.", "LookupType": "TechnoType"},
		{"Key": "Promote.VeteranExperience", "Description": "(double) A value added to the experience when a unit type is converted using Promote.VeteranType. Defaults to 0.0."},
		{"Key": "Promote.EliteExperience", "Description": "(double) A value added to the experience when a unit type is converted using Promote.EliteType. Defaults to 0.0."},
		{"Key": "Convert.Deploy", "Description": "The type a IsSimpleDeployer=yes unit deploys into. This converts the type after deploying completed, and after the optional DeployingAnim has finished playing. Defaults to none.", "LookupType": "TechnoType"},
		{"Key": "Convert.Water", "Description": "The type to convert to when a unit moves onto a beach or water cell. Defaults to none.", "LookupType": "TechnoType"},
		{"Key": "Convert.Land", "Description": "The type to convert to when a unit moves onto a cell that\u2019s neither beach nor water. Defaults to none.", "LookupType": "TechnoType"},
		{"Key": "Convert.Script", "Description": "The type to convert an object to when executing the Convert Type Team Script. Defaults to none.", "LookupType": "TechnoType"},
		{"Key": "GroupAs", "Description": "(string) The group name this unit is considered as. Name length can be up to 30 characters. Defaults to the type\u2019s ID. Note Check that you don\u2019t accidentally use an existing ID of a probably unrelated type as group name. This would include this type in this selection group, if it doesn\u2019t have GroupAs set to some other value itself."},
		{"Key": "Assaulter.Level", "Description": "(integer) Defines the levels compared when an Assaulter=yes infantry is to assault building. Infantry can only assault buildings with levels less than or equal to their own level. Defaults to 0."},
		{"Key": "SlamSound", "Description": "(sound entry) The sound played to the player when placing a building of this type on the map. Defaults to [AudioVisual]\u25baBuildingSlam."},
		{"Key": "BuiltAt", "Description": "Units will be kicked out of the first not-busy building the house owns that is mentioned in this list. If no BuildingType is set, all factories that can produce this unit will be checked. Defaults to none.", "LookupType": "BuildingTypes", "MultipleValues": true},
		{"Key": "Cloneable", "Description": "(boolean) Whether or not this infantry or unit can be cloned by Cloning=yes, CloningFacility=yes or their respective ClonedAt buildings. Defaults to yes."},
		{"Key": "ClonedAs", "Description": "The type to use as override when producing a clone of this object. If not set, the clones will be made of the same type as this object. Units can only be cloned as VehicleType, and infantry can only be cloned as InfantryType. Defaults to none.", "LookupType": "TechnoType"},
		{"Key": "ClonedAt", "Description": "Each building of the types mentioned in the list owned by the same house will kick out an extra clone of this object for free. If a building is blocked, the player will get no refunds. Defaults to none. Note Cloning will ignore buildings with Factory= set. Note that Factory is not what causes the units to walk or drive out properly, WeaponsFactory=yes, GDIBarracks=yes, NODBarracks=yes and YuriBarracks=yes are. Note If ClonedAt is specified, neither Cloning=yes nor CloningFacility=yes will clone the object.", "LookupType": "BuildingTypes", "MultipleValues": true},
		{"Key": "CloakSound", "Description": "(Sound) The sound played when this object cloaks or submerges. Defaults to [AudioVisual]\u25baCloakSound."},
		{"Key": "DecloakSound", "Description": "(Sound) The sound played when this object decloaks or emerges. Defaults to [AudioVisual]\u25baDecloakSound."},
		{"Key": "Cloakable.Stages", "Description": "(integer) The number of cloaking stages this techno will go through when cloaking or decloaking. Defaults to [General]\u25baCloakingStages."},
		{"Key": "Cloakable.Allowed", "Description": "(boolean) Whether this techno is allowed to cloak at all. If set to no, this techno is not allowed to be cloaked (neither through self-cloak nor through Cloak Generators). Defaults to yes."},
		{"Key": "SensorArray.Warn", "Description": "(boolean) Whether EVA warnings and radar events should be generated if this type is detected. This does not hide the unit or building from the Sensor Array, and the object will still become visible. Defaults to yes."},
		{"Key": "DesignatorRange", "Description": "(integer - cells) Range in cells around the unit or structure that becomes targetable by super weapons requiring this object as designator. Defaults to [TechnoType]\u25baSight."},
		{"Key": "InhibitorRange", "Description": "(integer - cells) Range in cells around the unit or structure that becomes untargetable by super weapons having this object set as inhibitor. Defaults to [TechnoType]\u25baSight."},
		{"Key": "TiberiumProof", "Description": "(boolean) Whether this unit is immune to tiberium damage. Defaults to no for InfantryTypes, to yes otherwise."},
		{"Key": "TiberiumTransmogrify", "Description": "(integer - percent) Chance of which a unit of this type dying of tiberium damage transforms into a [General]\u25baSmallVisceroid. Defaults to [General]\u25baTiberiumTransmogrify."},
		{"Key": "TiberiumHeal", "Description": "(boolean) Whether this unit heals if standing on a cell containing Tiberium. Defaults to no. Note If yes, units leave behind a random amount of tiberium when destroyed or killed by default. This can be customized. See Tiberium Remains."},
		{"Key": "TiberiumRemains", "Description": "(boolean) Whether this unit leaves behind tiberium when destroyed. Defaults to TiberiumHeal if [General]\u25baTiberiumHealEnabled=yes, to no otherwise."},
		{"Key": "TiberiumSpill", "Description": "(boolean) Whether this techno with positive Storage will spill parts of its stored tiberium when destroyed. Defaults to no."},
		{"Key": "Berserk.ROFMultiplier", "Description": "(float - multiplier) The multiplier applied when this unit is berserking. Smaller means faster firing. Defaults to [CombatDamage]\u25baBerserkROFMultiplier."},
		{"Key": "ImmuneToBerserk", "Description": "(boolean) Whether this object is immune to berserking, the Chaos Gas effect. Can be used to override ImmuneToPsionics and the PSIONICSIMMUNE ability. If set to yes, the object is not affected by Chaos Gas even if not ImmuneToPsionics=yes ; if set to no, the object can be affected by Chaos Gas despite maybe being immune to psionics. If not set, acts as if set to yes if ImmuneToPsionics=yes or the object gained the PSIONICSIMMUNE ability through veterancy, otherwise as if set to no. Note Currently, the default of not being set cannot be restored once this tag has been set."},
		{"Key": "IronCurtain.Modifier", "Description": "(float - multiplier) If the Iron Curtain effect duration is positive it will be multiplied by this factor. Use 0% to create a unit that cannot be affected by the Iron Curtain. IronCurtain.Modifier defaults to 100%."},
		{"Key": "ImmuneToEMP", "Description": "(boolean) The above tag specifies whether or not the TechnoType is immune to the effects of EMP. The default immunity status is determined based on the following rules: BuildingTypes : Defaults to no if Powered=yes and Power is negative. Defaults to no if providing one or more of the following special functions: Radar Super weapons ( SuperWeapon and SuperWeapon2 only) Undeploy into a vehicle (e.g. Construction Yards) Powers vehicles (e.g. Robot Control Centre) Gap Generator Sensors Laser Fence Posts Defaults to yes otherwise. InfantryTypes : Defaults to no if Cyborg=yes, to yes otherwise. VehicleTypes and AircraftTypes : Defaults to yes if Organic=yes, to no otherwise."},
		{"Key": "EMP.Modifier", "Description": "(float - multiplier) If the EMP effect duration is positive it will be multiplied by this factor. You can create units that are more or less prone to the Electromagnetic Pulse. Defaults to 100%."},
		{"Key": "EMP.Threshold", "Description": "(enumeration - one of yes|no|inair *or* integer - frames) Specifies whether or not an object of this type will be destroyed by EMP weapons. Use an integer to set the exact EMP duration this unit has to exceed to get destroyed. Positive values will destroy the unit if the number of EMP frames exceeds this value. yes equals 1, meaning immediately. Negative values will destroy the unit only if is currently in-air. inair equals -1, meaning immediately if in air. A value of zero will disable this feature. no equals 0. Defaults to inair, destroying all units if they are in the air the instant the EMP hits. Note Parachuting units and units being lifted or lowered by a Magnetron do not count as being in air. Only exceeding their positive threshold (if set) will kill them."},
		{"Key": "EMP.Sparkles", "Description": "(animation) The animation played over an object of this type disabled by EMP as long as the effect lasts. When the effect subsides, the animation will finish playing and then disappear. Use none to disable the animation. Defaults to [General]\u25baEMPulseSparkles."},
		{"Key": "HasSpotlight", "Description": "(boolean) If set to yes, creates a spotlight from the unit or structure. Defaults to no."},
		{"Key": "Spotlight.StartHeight", "Description": "(integer - leptons) Specifies the number of leptons above the ground at which the spotlight will be generated. Has to be 0 or greater. Defaults to 430."},
		{"Key": "Spotlight.Distance", "Description": "(integer - leptons) The number of leptons ahead of the unit where the spotlight will reach the ground. Defaults to 1024."},
		{"Key": "Spotlight.AttachedTo", "Description": "(enumeration - one of body|turret) The part of the unit that the spotlight will align to in regards to facing. If set to body then the spotlight will be pointed in the direction the unit\u2019s body is facing, if set to turret then the spotlight will be pointed in the direction the unit\u2019s turret is facing. Does not work on BuildingTypes. Defaults to body."},
		{"Key": "Spotlight.DisableRed", "Description": "(boolean) If set to yes then the spotlight will not emit any red light. Defaults to no."},
		{"Key": "Spotlight.DisableGreen", "Description": "(boolean) If set to yes then the spotlight will not emit any green light. Defaults to no."},
		{"Key": "Spotlight.DisableBlue", "Description": "(boolean) If set to yes then the spotlight will not emit any blue light. Defaults to no."},
		{"Key": "Spotlight.DisableColor", "Description": "(boolean) If set to yes then the spotlight will paint the ground darker, instead of brighter, and the disable red/green/blue flags mentioned above will be ignored. Defaults to no."}
	],

	"InfantryUnits": [
		{"Key": "Doggie", "Description": "(boolean) Whether this unit exhibits Tiberian Fiend behavior: Sitting down on Tiberium when in guard mode, aborting attack missions and running for Tiberium when badly hurt, and being easily aggravated. Requires Crawls=yes, otherwise the unit will not sit down on Tiberium, as well as NotHuman=yes to not show human death animations when killed. Defaults to no."},
		{"Key": "IsCow", "Description": "(boolean) Defaults to yes for [COW], otherwise to no."},
		{"Key": "IsDesolator", "Description": "(boolean) Whether the firing timing and deploy behavior is changed for this infantry unit as described above. Defaults to yes for [DESO], otherwise to no."},
		{"Key": "VehicleThief.EnterSound", "Description": "(Sound name) Specifies the sound played when a hijacker captures an enemy vehicle. This also works for infantry with CanDrive=yes when reclaiming neutralized units. Defaults to none."},
		{"Key": "VehicleThief.LeaveSound", "Description": "(Sound name) Specifies the sound played when a hijacker leaves a vehicle when it is destroyed. Defaults to none."},
		{"Key": "VehicleThief.BreakMindControl", "Description": "(boolean) Whether the vehicle thief can hijack units that are mind-controlled. The link between the controller and the unit will be broken when the hijacker enters. Otherwise the hijacker cannot steal the unit. Defaults to yes."},
		{"Key": "VehicleThief.OneTime", "Description": "(boolean) Whether the vehicle thief will be consumed in the process of capturing a unit. Otherwise the hijacker will emerge when the captured unit is destroyed. In every case the hijacker will be reimbursed when the unit is grinded. Defaults to no."},
		{"Key": "VehicleThief.KillPilots", "Description": "(integer) The number of pilots the vehicle thief kills when entering a unit. These pilots will have no chance to escape the unit when it is destroyed. Use -1 to kill all pilots. In Tiberian Sun the hijacker will prevent any crew from escaping a destroyed vehicle. Defaults to 0."},
		{"Key": "NoSelfGuardArea", "Description": "(boolean) Whether infantry units with negative damage weapons get the guard area cursor on themselves. If no, the guard area cursor will not take precedence, allowing other cursors like the deploy cursor to be shown. Defaults to no."},
		{"Key": "Saboteur", "Description": "(boolean) Whether this infantry can blow up a sabotagable building. The building will be destroyed as if C4 was placed, and the Saboteur is consumed in this process. Requires Infiltrate=yes. Not supported together with vehicle hijacking, CanDrive=yes, C4 (either C4=yes or granted through veterancy) and Occupier=yes logics. Defaults to no."},
		{"Key": "Cloakable.Deployed", "Description": "(boolean) Whether this infantry is only allowed to self-cloak when deployed. Requires Deployer=yes and Cloakable=yes. Defaults to no."}
	],

	"DrivingVehicleUnits": [
		{"Key": "VoiceIFVRepair", "Description": "(soundmd entry) Specifies the response this IFV gives when ordered to repair something. If this value is not set, [VehicleType]\u25baVoiceAttack is used. Defaults to [AudioVisual]\u25baVoiceIFVRepair for [FV], otherwise to none."},
		{"Key": "Harvester.TooFarDistance", "Description": "(integer - cells) Overrides the distance to consider too far to reserve a refinery. Requires Harvester=yes. Defaults to [General]\u25baChronoHarvTooFarDistance for Teleporter=yes units, otherwise to [General]\u25baHarvesterTooFarDistance."},
		{"Key": "Harvester.KickDelay", "Description": "(integer - frames) Overrides the interval in which to wake up the Slave Miner. For Slave Miner unis only. Use -1 to not wake up the Slave Miner automatically. Defaults to [General]\u25baSlaveMinerKickFrameDelay."},
		{"Key": "HunterSeeker.DetonateProximity", "Description": "(integer) Distance to target in leptons below which the Hunter Seeker will detonate. Defaults to [General]\u25baHunterSeekerDetonateProximity."},
		{"Key": "HunterSeeker.DescendProximity", "Description": "(integer) Distance to target in leptons where the Hunter Seeker will start to descend. Defaults to [General]\u25baHunterSeekerDescendProximity."},
		{"Key": "HunterSeeker.AscentSpeed", "Description": "(integer) Speed value used while rising to a higher flight level. Defaults to [General]\u25baHunterSeekerAscentSpeed."},
		{"Key": "HunterSeeker.DescentSpeed", "Description": "(integer) Speed value used while going down to a lower flight level. Defaults to [General]\u25baHunterSeekerDescentSpeed."},
		{"Key": "HunterSeeker.EmergeSpeed", "Description": "(integer) Speed value used when ascending from the launch site. Defaults to [General]\u25baHunterSeekerEmergeSpeed."},
		{"Key": "WaterImage", "Description": "This allows the amphibious unit\u2019s image to change from XXXX.shp or XXXX.vxl (defined by Image= ) to YYYY.shp or YYYY.vxl (defined by [WaterImage]\u25baImage= ) when in water, similar to UnloadingClass. Please note that SHP units cannot have a voxel WaterImage, and vice versa. The VehicleType has to be defined under [VehicleTypes].", "LookupType": "VehicleType"}
	],

	"AircraftUnits": [
		{"Key": "ReloadRate", "Description": "(decimal - minutes) The interval between restoring one round of ammunition when docked to a UnitReload=yes building. Defaults to [General]->ReloadRate."},
		{"Key": "Smoke.Anim", "Description": "(animation) The animation created as smoke trailer. Defaults to SGRYSMK1."},
		{"Key": "Smoke.ChanceRed", "Description": "(integer - percent) The chance of a heavily damaged aircraft creating a smoke animation each frame. Defaults to 10."},
		{"Key": "Smoke.ChanceDead", "Description": "(integer - percent) The chance of a crashing aircraft creating a smoke animation each frame. Defaults to 80."},
		{"Key": "Carryall.SizeLimit", "Description": "(integer) The maximum Size= that this carryall can lift. Use -1 to allow any size. Defaults to -1."},
		{"Key": "Crashable", "Description": "(boolean) Whether the aircraft will explode and fall down crashing into the ground when destroyed. Otherwise the aircraft will explode in mid-air and disappear. Defaults to yes."},
		{"Key": "CrashSpin", "Description": "(boolean) Whether the aircraft should spin when crashing, opposed to gliding down to the ground. Defaults to yes. Note This setting only works for aircraft. JumpJet=yes VehicleType s do not support it."},
		{"Key": "Missile.Custom", "Description": "(boolean) Specifies whether this AircraftType should exhibit missile behavior. If set to yes it enables the missile tags listed below, which must be set to meaningful values. Not recommended on V3RocketType, DMislType and CMislType. Defaults to no. Note If you intend to override the original missiles defined as V3RocketType, DMislType and CMislType, you also have to define the following tags. Ares will not default to the original game tags for these types defined in the [General] section."},
		{"Key": "Missile.PauseFrames", "Description": "(integer) Defines how many frames the missile pauses on the launching unit before tilting. Defaults to 0."},
		{"Key": "Missile.TiltFrames", "Description": "(integer) Defines how many frames it takes for the missile to tilt to firing position. Defaults to 0."},
		{"Key": "Missile.PitchInitial", "Description": "(float) Defines the starting pitch of the missile before tilting up. Valid range is 0.0 (horizontal) to 1.0 (vertical). Defaults to 0.0."},
		{"Key": "Missile.PitchFinal", "Description": "(float) Defines the ending pitch of the missile after tilting up and when firing. Valid range is 0.0 (horizontal) to 1.0 (vertical). Defaults to 0.0."},
		{"Key": "Missile.TurnRate", "Description": "(float) Defines the pitch maneuverability of the missile in air. See original missiles for examples. Valid range is 0.0 to 1.0. Defaults to 0.0."},
		{"Key": "Missile.RaiseRate", "Description": "(float) Defines how much the missile will raise each turn on the launching unit. Defaults to 0.0."},
		{"Key": "Missile.Acceleration", "Description": "(float) Defines how much is added to the missile\u2019s velocity each frame during launch. Defaults to 0.0."},
		{"Key": "Missile.Altitude", "Description": "(integer) Defines the cruising altitude in leptons at which height missile begins leveling off. Defaults to 0."},
		{"Key": "Missile.BodyLength", "Description": "(integer) Defines how long the body of the missile is in leptons. This is used to draw the trailer. Defaults to 0."},
		{"Key": "Missile.LazyCurve", "Description": "(boolean) Whether the missile\u2019s path is a ballistic curve like the original V3 rocket. Otherwise the missile maintains the defined altitude. Defaults to no."},
		{"Key": "Missile.Damage", "Description": "(integer) Defines how much damage the missile does when launched from a rookie or veteran unit. Defaults to 0."},
		{"Key": "Missile.EliteDamage", "Description": "(integer) Defines how much damage the missile does when launched from an elite unit. Defaults to 0."},
		{"Key": "Missile.Warhead", "Description": "Defines the warhead the missile uses to deliver damage when launching from a rookie or veteran unit. Defaults to none.", "LookupType": "Warhead"},
		{"Key": "Missile.EliteWarhead", "Description": "Defines the warhead the missile uses to deliver damage when launching from an elite unit. Defaults to none.", "LookupType": "Warhead"},
		{"Key": "Missile.Weapon", "Description": "(Weapon) The weapon used to deliver damage. If not set, Missile.Damage and Missile.Warhead are used to create the explosion. Defaults to none."},
		{"Key": "Missile.EliteWeapon", "Description": "(Weapon) The weapon used to deliver damage. If not set, Missile.EliteDamage and Missile.EliteWarhead are used to create the explosion. Defaults to none."},
		{"Key": "Missile.TakeOffAnim", "Description": "Defines the optional animation played when the missile takes off. Defaults to V3TAKOFF.", "LookupType": "Animation"},
		{"Key": "Missile.TrailerAnim", "Description": "Defines the optional animation that is used to draw the trailer of this missile. Defaults to V3TRAIL.", "LookupType": "Animation"},
		{"Key": "Missile.TrailerSeparation", "Description": "(integer) Defines the number of frames to the creation of another trailer animation. Defaults to 3."}
	],

	"BuildingUnits": [
		{"Key": "Chronoshift.IsVehicle", "Description": "(boolean) Specifies whether this building is actually a deployed vehicle and should be chronoshifted by the Chronosphere super weapon if it affects units and Chronosphere.ReconsiderBuildings=yes is set. On the other hand this building will not be considered a building anymore and thus will be ignored by a Chronosphere that doesn\u2019t affect units. Defaults to no."},
		{"Key": "Cursor.Spy", "Description": "(mouse cursor) The cursor to show for a spy infiltrating a building of this type. Defaults to Enter."},
		{"Key": "EnemyUIName", "Description": "(csf string) Optional name used for enemy buildings. Observers, allies, and players who infiltrated the building will see the real name defined by UIName, all other players will see this name. Note This tag is currently limited to BuildingTypes. It might be expanded to other TechnoTypes in the future."},
		{"Key": "Harvester.ScanCorrection", "Description": "(integer - cells) Overrides the distance to consider better when scooting forward. For Slave Miner buildings only. Defaults to [General]\u25baSlaveMinerScanCorrection."},
		{"Key": "FactoryOwners.HasAllPlans", "Description": "(boolean) Whether this building provides plans for all factory types of the initial owner. If yes, this building satisfies FactoryOwner requirements of all object types. If the building is lost, the plans are lost. Defaults to no."},
		{"Key": "FactoryOwners.Permanent", "Description": "(boolean) Whether a player capturing a building of this type would permanently gain all plans of its initial owner. Supported on upgrades. Defaults to no."},
		{"Key": "ReverseEngineersVictims", "Description": "(boolean) Enables the reverse-engineering logic. Defaults to no."},
		{"Key": "ImmuneToSaboteurs", "Description": "(boolean) Whether this building cannot be sabotaged. If yes, saboteurs cannot enter this structure. Defaults to yes for CanC4=no or TechLevel=-1 CanBeOccupied=yes buildings, to no otherwise."},
		{"Key": "UnitSell", "Description": "(boolean) Whether this building can sell docked units. Human players can click the Sell button and move it over the docked unit. The cursor will change to the SellUnit cursor. Defaults to UnitRepair."},
		{"Key": "Crew.EngineerChance", "Description": "(integer - percent between 0 and 100) The chance the owning side\u2019s Engineer is spawned instead of an ordinary crew member. If the building has been captured, engineers are not allowed to be spawned regardless of this setting. Defaults to 25 if Factory=BuildingType, to 0 otherwise."},
		{"Key": "Academy.InfantryVeterancy", "Description": "(double - veterancy levels) The veterancy bonus to grant to any InfantryType or any Organic=yes VehicleType if a player owns one of these buildings. Defaults to 0.0."},
		{"Key": "Academy.AircraftVeterancy", "Description": "(double - veterancy levels) The veterancy bonus to grant to any AircraftType or any ConsideredAircraft=yes VehicleType if a player owns one of these buildings. Defaults to 0.0."},
		{"Key": "Academy.VehicleVeterancy", "Description": "(double - veterancy levels) The veterancy bonus to grant to any VehicleType with Organic=no and ConsideredAircraft=no if a player owns one of these buildings. Defaults to 0.0."},
		{"Key": "Academy.BuildingVeterancy", "Description": "(double - veterancy levels) The veterancy bonus to grant to any BuildingType if a player owns one of these buildings. Defaults to 0.0."},
		{"Key": "Academy.Types", "Description": "The only types that are affected by this academy to get the defined bonuses. If the list is empty, all types are affected. Defaults to none.", "LookupType": "TechnoTypes", "MultipleValues": true},
		{"Key": "Academy.Ignore", "Description": "The types that will never be affected by this academy. Defaults to none.", "LookupType": "TechnoTypes", "MultipleValues": true},
		{"Key": "AIBaseNormal", "Description": "(boolean) Whether this building will extend the base space of the AI player. Defaults to no if both UndeploysInto= is set and ResourceGatherer=yes, otherwise defaults to whether the building is considered a vehicle."},
		{"Key": "AIInnerBase", "Description": "(boolean) Whether the AI prefers to place this building closer to the center of its base. Use this for buildings that are to be protected or that provide a ranged effect that works best if it covers large portions of the base. Defaults to yes if CloakGenerator=yes, to no otherwise. Note The larger the building foundation, the more unlikely it will be for the AI to find a place to build it near the base center in late game, in which case the game will fall back to the original logic and find a place in the perimeter."},
		{"Key": "AIBuildCounts", "Description": "(integers) The number of buildings the AI will build of this type depending on the difficulty. Order is hard to easy. Each value must be equal to or greater than 1. Defaults to 1,1,1."},
		{"Key": "AIExtraCounts", "Description": "(integers) The maximum number of extra buildings the AI can build of this type depending on the difficulty. Order is hard to easy. A random number of buildings will be build in addition to the ones from the normal build count. Each value must be equal to or greater than 0. Defaults to 0,0,0."},
		{"Key": "BuildupTime", "Description": "(double - minutes) The time the buildup animation plays regardless of the number of frames. Defaults to [General]\u25baBuildupTime. Note Note that certain building functions still become available immediately after being placed, not only after being fully constructed."},
		{"Key": "SellTime", "Description": "(double - minutes) Analogous to BuildTime when a building is sold. Defaults to BuildupTime."},
		{"Key": "Factory.ExplicitOnly", "Description": "(boolean) Set this to yes to only allow this factory to produce units that explicitly mention this BuildingType in their BuiltAt list. Units with empty BuiltAt lists will not be built here. The effect is the same as stating BuiltAt lists on every unit, omitting all factories that have this tag set. Defaults to no. Quickstart To recreate the dog from Red Alert that is trained in a kennel, set [KENN]\u25baFactory=InfantryType, [KENN]\u25baFactory.ExplicitOnly=yes, [DOG]\u25baBuiltAt=KENN and update the [DOG]\u25baPrerequisite to contain [KENN]."},
		{"Key": "CloningFacility", "Description": "(boolean) Defines whether this building will clone all VehicleTypes with the same Naval setting as itself that are Cloneable=yes and ClonedAt=none. This is the VehicleType version of the Cloning Vats. Defaults to no."},
		{"Key": "Fake", "Description": "(boolean) Whether this building is considered a fake. Defaults to no."},
		{"Key": "ForceShield.Modifier", "Description": "(float - multiplier) The number of seconds of Force Shield duration is multiplied by this value. Valid values are 0% (Force Shield disallowed) or higher. Defaults to 100%. Note Buildings with a ForceShield.Modifier value of 0.0 or less are not eligible to fire a Force Shield super weapon on."},
		{"Key": "GateDownSound", "Description": "(sound name) The sound played when this gate opens. Defaults to [AudioVisual]\u25baGateDown."},
		{"Key": "GateUpSound", "Description": "(sound name) The sound played when this gate closes. Defaults to [AudioVisual]\u25baGateUp."},
		{"Key": "LightningRod", "Description": "(boolean) Specifies whether this building attracts lightning. If this building is the closest object to a cloud created randomly, the cloud will be created just above the building. Defaults to no."},
		{"Key": "LightningRod.Modifier", "Description": "(float - modifier) Buildings with LightningRod=yes set being hit by lightning get the damage multiplied by this value. Values less than 1.0 reduce damage, larger values increase the damage. Defaults to 1.0."},
		{"Key": "MassSelectable", "Description": "(boolean) Whether buildings of this type are considered units when mass-selecting. If no, buildings will not be included in the selection, even if they undeploy into a unit and are actually to be considered vehicles. Defaults to yes for 1x1 buildings with UndeploysInto= set."},
		{"Key": "IsPassable", "Description": "(boolean) Whether the cells the building occupies can still be entered or stood on by vehicles and infantry. Defaults to no."},
		{"Key": "PrismForwarding", "Description": "(enumeration - yes|no|forward|attack) Specifies whether or not this building is a Prism Tower. PrismForwarding=forward means that this building can support other towers but cannot attack as a Prism Tower. PrismForwarding=attack means that this building can attack as a Prism Tower but cannot support other towers. PrismForwarding=yes means that this building is a fully fledged Prism Tower - it can support other towers or attack. PrismForwarding=no means that this building is not a Prism Tower and will not be included in any prism networks. Defaults to yes for the building specified by [General]\u25baPrismType, defaults to no for all other buildings."},
		{"Key": "PrismForwarding.Targets", "Description": "The list of BuildingTypes that this tower can support. Defaults to just the building type itself, although don\u2019t forget to mention the building itself if you decide to include this flag.", "LookupType": "BuildingTypes", "MultipleValues": true},
		{"Key": "PrismForwarding.MaxFeeds", "Description": "(integer) The maximum number of slave (support) towers that can feed directly into this one (i.e. adjacent towers). -1 means no limit. Defaults to [General]\u25baPrismSupportMax."},
		{"Key": "PrismForwarding.MaxChainLength", "Description": "(integer) The maximum number of backward links that can precede this tower. -1 means no limit. Default is 1. In order to achieve what is shown in the pre-release screenshot above, you would need to set this to at least 3."},
		{"Key": "PrismForwarding.MaxNetworkSize", "Description": "(integer) If this is the firing tower then PrismForwarding.MaxNetworkSize is the total number of towers allowed in the prism network, not including the firing tower itself. Only the firing tower dictates the maximum network size, regardless of what other tower types may be included in the network. -1 means no limit. Defaults to [General]\u25baPrismSupportMax."},
		{"Key": "PrismForwarding.SupportModifier", "Description": "(float - multiplier) This works in the same way as the old PrismSupportModifier - it is the amount of multiplier that this tower will contribute to the firing beam. The multiplier accumulates in a linear fashion (i.e. if there are 2 support towers, each with PrismForwarding.SupportModifier=150%, then the total multiplier to damage will be 150% + 150% + 100% = 400%. Defaults to [General]\u25baPrismSupportModifier."},
		{"Key": "PrismForwarding.DamageAdd", "Description": "(integer - damage bonus) A flat damage bonus added to the firing beam before the PrismForwarding.SupportModifier multiplier is applied. This can be used instead of the multiplier, or it can be used in conjunction with the multiplier to progressively dial up or down the final damage as more towers are included in the network. Defaults to 0. Note You will need to limit the number of towers in the network if dialing down the damage bonus, otherwise the firing beam may end up becoming a healing weapon. You can input your own values into the Prism Forwarding spreadsheet to see the effect this has on the damage dealt by your prism networks."},
		{"Key": "PrismForwarding.ToAllies", "Description": "(boolean) Whether or not this Prism Tower is allowed to support allied towers. Defaults to no. Note that, in long-chain prism networks, this tower must be allied with the firing tower as well as the target tower."},
		{"Key": "PrismForwarding.BreakSupport", "Description": "(boolean) Whether or not this Prism Tower can abort supporting another tower at the last moment, in order to become a master (firing) tower instead. If a tower does break support, it does not need to restart charging. Defaults to no."},
		{"Key": "PrismForwarding.Intensity", "Description": "(integer - laser thickness) This allows you to control how thick the laser beam grows as the size of the prism network increases. By default, a firing Prism Tower that is supported by 1 or more other towers would have a LaserThickness of 5 - that\u2019s 2 higher than the default LaserThickness of the firing weapon (3). The PrismForwarding.Intensity flag treats negative values as an absolute addition to the firing beam, so the default value of -2 leaves the behavior exactly the same as the original game. Positive values, on the other hand, tell Ares that you want the thickness of the beam to be dependent on the number of backward chains in the network, and also have the support beam thickness increase in the same way. A PrismForwarding.Intensity value of 1 would cause the farthest beam to have no thickness increase, the next to have an increase of 1, the next to have an increase of 2, and so on. See the section on LaserThickness for more information regarding the way lasers are drawn."},
		{"Key": "Overpowerable", "Description": "(boolean) In the original game, a firing Prism Tower always fires its Primary weapon (whose damage is multiplied based on the number of supporting towers). The Overpowerable flag was ignored. Ares allows firing Prism Towers to make use of the overpower logic - you can now have a supported and overpowered Prism Tower at the same time! Note that overpowering a support tower will not have any effect."},
		{"Key": "PrismForwarding.SupportWeapon", "Description": "(weapon) In the original game, the [PrismSupport] weapon was never referenced directly, and the Secondary weapon of the Prism Tower was only ever referenced to get the Range that towers could support over. In Ares, the Secondary weapon of the Prism Tower is not referenced at all. Instead, we use PrismForwarding.SupportWeapon to explicitly reference a weapon object from which to get additional settings for the support beam. It isn\u2019t necessary to specify a support weapon - default values will be used if you don\u2019t specify one."},
		{"Key": "PrismForwarding.EliteSupportWeapon", "Description": "(weapon) If the tower becomes elite then the support beam will get its properties from this weapon. Defaults to PrismForwarding.SupportWeapon."},
		{"Key": "ProduceCashDisplay", "Description": "(boolean) Whether the building will show the credits it produced. Not respected on upgrades. The setting from the main building type will be used instead. Defaults to no."},
		{"Key": "EngineerRepairable", "Description": "(boolean) Whether engineers can repair this building. If no, the building might still be repaired by the normal building repair ( ClickRepairable=yes ), but Engineers cannot be used to restore full health instantly. Defaults to Repairable."},
		{"Key": "SecretLab.PossibleBoons", "Description": "Specifies all the buildings, vehicles, infantry and aircraft that this particular building could potentially award as a secret lab boon. Defaults to all items from [General]\u25baSecretInfantry, [General]\u25baSecretUnits and [General]\u25baSecretBuildings.", "LookupType": "TechnoTypes", "MultipleValues": true},
		{"Key": "SecretLab.GenerateOnCapture", "Description": "(boolean) Whether the Secret Lab shall re-pick the boon to be offered every time the building is captured by or assigned to a MultiplayPassive=no country. Otherwise, the boon is picked only once, the first time it is assigned to such country. Defaults to no."},
		{"Key": "SolidHeight", "Description": "(integer - cells) How tall the solid part of the building is considered to be, measured in cells (each cell has a height of 256 leptons), so buildings with a large amount of clear space near their top can allow projectiles to fly through that space. Negative values (e.g. -1 ) tell the game to consider the building\u2019s full Height as solid. Default is 0, meaning the building is not at all solid (as per the normal game). Note The solid building logic does not lend itself well to non-rectangular buildings, such as the Paris Tower or Space Needle."},
		{"Key": "SolidLevel", "Description": "(integer) The solidity of this building. Defaults to 1."},
		{"Key": "SpyEffect.Custom", "Description": "(boolean) Whether or not to use the Ares spy infiltration logic instead of the original Yuri\u2019s Revenge logic."},
		{"Key": "SpyEffect.ResetRadar", "Description": "(boolean) Whether or not spying this enemy building will cause the normal radar sabotage behavior (i.e. re-shrouding the enemy\u2019s map down to just the terrain that they can presently see)."},
		{"Key": "SpyEffect.RevealRadar", "Description": "(boolean) NEW EFFECT Whether or not spying this enemy radar will reveal all further unit movements to the infiltrating player. Enemy units will then scout the map like own units until the infiltrated building is destroyed, sold, or captured. The building must also have Radar=yes set."},
		{"Key": "SpyEffect.KeepRadar", "Description": "(boolean) NEW EFFECT If enabled, a player infiltrating this building will still have access to the owning player\u2019s radar even if the building is destroyed, sold, or captured. Otherwise the spy effect is removed. Requires SpyEffect.RevealRadar=yes and a Radar=yes building."},
		{"Key": "SpyEffect.PowerOutageDuration", "Description": "(integer - frames) The number of frames for which the enemy\u2019s power will be sabotaged (i.e. temporarily reduced to zero)."},
		{"Key": "SpyEffect.StolenMoneyPercentage", "Description": "(float - percentage) The percentage of the enemy\u2019s current credits that will be stolen from the enemy upon spying this enemy building. Defaults to 0%."},
		{"Key": "SpyEffect.StolenMoneyAmount", "Description": "(integer - credits) NEW EFFECT The fixed amount of credits that will be stolen from the enemy upon spying this enemy building. Defaults to 0. If used together with SpyEffect.StolenMoneyPercentage, this defines the maximum amount of money to steal. Quickstart If you want to express \u201cTake three quarters of the enemy\u2019s money, but no more than 10,000 credits\u201d, use both tags: SpyEffect.StolenMoneyPercentage=75% and SpyEffect.StolenMoneyAmount=10000."},
		{"Key": "SpyEffect.ResetSuperweapons", "Description": "(boolean) Whether or not spying this enemy building will cause all super weapons attached to it ( SuperWeapon, SuperWeapon2, SuperWeapons and all super weapons on attached upgrades) to have their countdown timers restarted."},
		{"Key": "SpyEffect.SuperWeapon", "Description": "(SuperWeaponType) NEW EFFECT Grants this super weapon when infiltrating an enemy building of this type. Note Not all super weapon types might be supported."},
		{"Key": "SpyEffect.SuperWeaponPermanent", "Description": "(boolean) Whether the granted super weapon will become available permanently. If yes, it will become available uncharged, and it won\u2019t be lost once fired. Otherwise, the super weapon will become available pre-charged but disappear again after being fired once. Defaults to no."},
		{"Key": "SpyEffect.StolenTechIndex", "Description": "(integers) The stealable technology types that is stolen upon spying this enemy building. Only values from 0 to 31 (inclusive) are supported. Use -1 to disable the effect. Defaults to -1. Note Note that despite its singular name this tag takes a list of integers and it is thus possible to steal several technology types when infiltrating a single building."},
		{"Key": "SpyEffect.InfantryVeterancy", "Description": "(boolean) Whether spying this building will make all future infantry with Trainable=yes you build from your own factories start veteran. Defaults to no."},
		{"Key": "SpyEffect.VehicleVeterancy", "Description": "(boolean) Whether spying this building will make all future Naval=no vehicles with Trainable=yes you build from your own factories start veteran. Defaults to no."},
		{"Key": "SpyEffect.NavalVeterancy", "Description": "(boolean) NEW EFFECT Whether spying this building will make all future Naval=yes vehicles with Trainable=yes you build from your own factories start veteran. Defaults to no."},
		{"Key": "SpyEffect.AircraftVeterancy", "Description": "(boolean) NEW EFFECT Whether spying this building will make all future aircraft with Trainable=yes you build from your own factories start veteran. Defaults to no."},
		{"Key": "SpyEffect.BuildingVeterancy", "Description": "(boolean) NEW EFFECT Whether spying this building will make all future buildings with Trainable=yes you build from your own Construction Yards start veteran. Defaults to no."},
		{"Key": "SpyEffect.RevealProduction", "Description": "(boolean) NEW EFFECT Whether or not spying this enemy building will allow you to see what the enemy is presently building from that factory, or the power output, or the owning player\u2019s money. Once the building has been spied, select the building and the information of the unit that is being produced will be displayed over the building. Fake=yes buildings will show the text TXT_FAKE and reveal their true name in tooltips (see EnemyUIName ) Power greater than 0 buildings will reveal the power level (formatted using TXT_POWER_DRAIN2 ) Storage greater than 0 buildings will see the player\u2019s credits (formatted using TXT_MONEY_FORMAT_1 ) Factory buildings will reveal the cameo of the current production Note Observers have been enabled to always have access to this information."},
		{"Key": "SpyEffect.UndoReverseEngineer", "Description": "(boolean) NEW EFFECT Whether spying this building will remove all technology the infiltrated player has reverse-engineered so far. Defaults to no."},
		{"Key": "SpyEffect.SabotageDelay", "Description": "(integer - frames) The number of frames after which the building will be demolished as if C4 had been planted. If negative, [CombatDamage]\u25baC4Delay is used. Use 0 to disable. Defaults to 0."},
		{"Key": "Returnable", "Description": "(boolean) Whether this building type will return to the civilian side when the owning player is defeated or giving up. Defaults to [General]\u25baReturnStructures."},
		{"Key": "LostEvaEvent", "Description": "(EVA event) The EVA message played when a building of this type is captured from the player. Requires NeedsEngineer=yes. Defaults to EVA_TechBuildingLost."},
		{"Key": "Message.Capture", "Description": "(CSF label) The text printed when a building of this type is captured by the player. Requires NeedsEngineer=yes. Defaults to none."},
		{"Key": "Message.Lost", "Description": "(CSF label) The text printed when a building of this type is captured by the enemy. Requires NeedsEngineer=yes. Defaults to none."},
		{"Key": "Degrade.Percentage", "Description": "(double - percentage) The percentage of health this building will degrade to in low power situations. A value of 1.0 will not degrade this building, a value of 0.0 will make it degrade till complete destruction. Defaults to [General]\u25baDegrade.Percentage."},
		{"Key": "Degrade.Amount", "Description": "(integer - hitpoints) The amount of damage this building will receive each interval of DamageDelay in low power situations. A value of 0 will not degrade this building. Defaults to [General]\u25baDegrade.AmountNormal if Power is greater than or equal to 0, otherwise to [General]\u25baDegrade.AmountConsumer."},
		{"Key": "Tunnel", "Description": "(TunnelType) The type of tunnel system this building is an entrance to. Note Tunnel buildings are not allowed to have weapons nor turrets and cannot be capturable or mind-controllable. Warning Hover units have the same problems with tunnel entrance buildings as they have entering UnitAbsorb=yes buildings."},
		{"Key": "UC.PassThrough", "Description": "(float - chance) The percentage of shots that will pass through to the occupants (and therefore not damage this building). Defaults to 0% (i.e. all shots damage the building / no shots damage the occupants). When there are no occupants inside then UC.PassThrough will be ignored (i.e. all shots damage the building)."},
		{"Key": "UC.FatalRate", "Description": "(float - chance) In the event that a shot has passed through, the percentage of those shots that will instantly kill one occupant, disregarding the weapon entirely. Defaults to 0%."},
		{"Key": "UC.DamageMultiplier", "Description": "(float - multiplier) If a shot has passed through but isn\u2019t necessarily fatal then one occupant will be damaged. The damage dealt by the weapon will be multiplied by UC.DamageMultiplier. Defaults to 100% (i.e. no change to the damage dealt by the weapon)."},
		{"Key": "Bunker.Raidable", "Description": "(boolean) Whether or not this building can be garrisoned by an enemy player\u2019s infantry, provided the building is not already occupied."},
		{"Key": "Rubble.Destroyed", "Description": "The new BuildingType that this BuildingType will transform into upon destruction. By default the building will be created with maximum Strength. Engineers will always get the cursor RepairTrench on the building. Buildings that are used as rubble via Rubble.Destroyed are not allowed to be occupied or have passengers of any kind. Capturable rubble is not supported. Warning Do not create loops using Rubble.Destroyed. This can freeze the game. A building cannot be its own rubble, neither directly or indirectly over one or more other BuildingTypes.", "LookupType": "BuildingType"},
		{"Key": "Rubble.Destroyed.Remove", "Description": "(boolean) Whether the building should just disappear instead of being converted to rubble. Overrides Rubble.Destroyed. Defaults to no."},
		{"Key": "Rubble.Destroyed.Owner", "Description": "(enumeration default|civilian|special|neutral) The country the destroyed building will belong to. default is the current owner, civilian is the first country from the side called Civilian, special and neutral are the countries named Special and Neutral respectively. Defaults to default."},
		{"Key": "Rubble.Destroyed.Strength", "Description": "(integer) The health the rubble building is created with. Positive values up to Strength are used directly. Negative values down to -99 are a percentage of full health, -1 meaning 1% of health. All other values mean full health. Defaults to Strength."},
		{"Key": "Rubble.Destroyed.Anim", "Description": "(AnimationType) An animation played when a building converted to rubble or removed. Defaults to none."},
		{"Key": "Rubble.Intact", "Description": "The new BuildingType that this BuildingType will transform into when it is repaired. The repaired building will be created with 1% Strength, unless set otherwise.", "LookupType": "BuildingType"},
		{"Key": "Rubble.Intact.Remove", "Description": "(boolean) Whether the building should just disappear instead of being recovered when an Engineer enters. Overrides Rubble.Intact. Defaults to no."},
		{"Key": "Rubble.Intact.Owner", "Description": "(enumeration default|civilian|special|neutral) The country the recovered building will belong to. default is the current owner, civilian is the first country from the side called Civilian, special and neutral are the countries named Special and Neutral respectively. Defaults to default."},
		{"Key": "Rubble.Intact.Strength", "Description": "(integer) The health the recovered building is created with. Positive values up to Strength are used directly. Negative values down to -99 are a percentage of full health, -1 meaning 1% of health. All other values mean full health. Defaults to -1, 1% of Strength."},
		{"Key": "Rubble.Intact.Anim", "Description": "(AnimationType) An animation played when a building is recovered or removed. Defaults to none."},
		{"Key": "IsTrench", "Description": "(string - trench type ID) Specifies a unique name for this particular trench so that the game knows that it is a trench for traversal purposes, and allows occupants to transfer between segments of the same trench type."},
		{"Key": "CanBeOccupiedBy", "Description": "Lists the units which are allowed to enter to this building. Requires CanBeOccupied=yes and Occupier=yes on the infantry.", "LookupType": "InfantryTypes", "MultipleValues": true},
		{"Key": "Cloakable.Powered", "Description": "(boolean) Whether this building will uncloak when shut down or in low-power situations. Otherwise the building will be allowed to cloak. Defaults to no."},
		{"Key": "SuperWeapons", "Description": "Comma separated list of SuperWeaponTypes which are granted by this building in addition to the ones defined as SuperWeapon and SuperWeapon2. Defaults to none. Each individual super weapon can be granted conditionally. The first available super weapon determines the EVA event played when a building of this type is placed, and its charge state is indicated by the building animations. Note This feature primarily supports providing access to additional super weapons. Note that SuperWeapon and SuperWeapon2 are still considered special, and not all aspects of the logic have been expanded.", "LookupType": "SuperWeaponTypes", "MultipleValues": true},
		{"Key": "Refinery.UseStorage", "Description": "(boolean) Whether the refinery building will store the Tiberium instead of converting it to money directly. Tiberium that is converted directly does not require storage space. Defaults to no."},
		{"Key": "Firestorm.Wall", "Description": "(boolean) Whether this building is part of the Firestorm Defense System. Defaults to no."}
	],

	"Weapons": [
		{"Key": "Abductor", "Description": "(boolean) If set to yes, weapons with this flag will absorb the target into the attacker\u2019s passenger hold. Should the attacking unit be destroyed, its passengers will emerge. Slaves\u2019 and spawned units\u2019 owner will be changed to the house Special. If the abductor is \u201cfull\u201d or the victim cannot be abducted, conventional damage is dealt. Defaults to no. Note Please make sure you have a passenger hold when using this. Also remember that SizeLimit defaults to 0, so if you don\u2019t set it, abduction of most units will be denied. As usual, PipScale is required for all transports. Note Due to the way Passengers for buildings was tacked on, it is possible buildings with abducting weapons will not work properly. (Using InfantryAbsorb / UnitAbsorb increases your chances.) These malfunctions are considered out of the scope of the request and will not be considered bugs. The same goes for InfantryTypes. Malfunctions on VehicleTypes and AircraftTypes, on the other hand, should be reported immediately."},
		{"Key": "Abductor.Temporal", "Description": "(boolean) Instead of abducting target units immediately, will abduct them only after they have been temporally erased. When the target unit would be warped away, it will be placed inside the abductor unit as passenger. If abduction fails, the target is erased normally. Requires Temporal=yes to be set on Warhead. Defaults to no."},
		{"Key": "Abductor.Anim", "Description": "(animation) This animation will be spawned at the location a unit is abducted from. Defaults to none."},
		{"Key": "Abductor.ChangeOwner", "Description": "(boolean) Sets whether the abducted unit shall change its owner to the abductor\u2019s house. Units which are ImmuneToPsionics=yes or which gained the PSIONICSIMMUNE veteran ability will not change owner. Defaults to no."},
		{"Key": "Abductor.AbductBelowPercent", "Description": "(float - percentage) Specifies the percentage of health a unit has to go below to be abducted. Units with more health than this percentage will not be abducted. Defaults to 100%."},
		{"Key": "Abductor.MaxHealth", "Description": "(integer - hitpoints) The amount of hitpoints above which it cannot be abducted any longer. If 0, health is not checked. Defaults to 0."},
		{"Key": "Ammo", "Description": "(integer) The rounds of ammunition needed to fire this weapon. If fewer than the required rounds are present, the unit will not fire and wait for the ammo to reload. Defaults to 1. Note This feature does not support AircraftTypes. Warning Units with ManualReload=yes will still target enemies and wait for reloading, which never happens."},
		{"Key": "Cursor.Attack", "Description": "(mouse cursor) The cursor to use as the attack cursor for this weapon. This cursor is used if only one unit is selected and its target is in range. Defaults to Attack."},
		{"Key": "Cursor.AttackOutOfRange", "Description": "(mouse cursor) The cursor used if an object can attack a target, but it is out if weapon\u2019s range and the unit needs to move first to attack it. Defaults to AttackOutOfRange. Note If two or more units are selected, this cursor is not used. Note that deployed units will get their No Move cursor instead, as they would have to, but cannot move."},
		{"Key": "ApplyDamage", "Description": "(boolean) Whether this weapon deals ordinary damage. Can be used to enable Damage to work with special weapons, or to disable dealing damage. Defaults to no if either IsSonic=yes or UseFireParticles=yes, to yes otherwise. Note If ApplyDamage=no, the damage is reduced to 0, thus some weapon effects like the warhead\u2019s animation will not play. This might change in the future."},
		{"Key": "Bolt.Color3", "Description": "(R,G,B) The three colors used to draw this Electric Bolt. Can be omitted to use the palette-dependent default values."},
		{"Key": "Bolt.ParticleSystem", "Description": "(ParticleSystem) Defines the spark particle system to spawn at the target location. Use none to disable the particle system. Defaults to [CombatDamage]\u25baDefaultSparkSystem."},
		{"Key": "IvanBomb.Delay", "Description": "(integer) The number of frames that will elapse before a time bomb detonates automatically. Defaults to [CombatDamage]\u25baIvanTimedDelay."},
		{"Key": "IvanBomb.Warhead", "Description": "The warhead that will be used when the bomb detonates. Defaults to [CombatDamage]\u25baIvanWarhead.", "LookupType": "Warhead"},
		{"Key": "IvanBomb.Damage", "Description": "(integer) The damage that will be dealt when the bomb detonates. Defaults to [CombatDamage]\u25baIvanDamage."},
		{"Key": "IvanBomb.AttachSound", "Description": "(sound name) The sound that will be played when the bomb is attached to a target. Defaults to [AudioVisual]\u25baBombAttachSound."},
		{"Key": "IvanBomb.TickingSound", "Description": "(sound name) The sound that will be played whilst the bomb is attached to a unit. In order for this sound to loop correctly, the sound must have Control=loop set in its INI section in soundmd.ini. Defaults to [AudioVisual]\u25baBombTickingSound."},
		{"Key": "IvanBomb.DeathBomb", "Description": "(boolean) Whether this bomb will be a death bomb instead of a timed bomb when planted on enemy objects. Defaults to no."},
		{"Key": "IvanBomb.DeathBombOnAllies", "Description": "(boolean) Whether this bomb will be a death bomb instead of a timed bomb when planted on allied objects. Defaults to no."},
		{"Key": "IvanBomb.CanDetonateTimeBomb", "Description": "(boolean) Whether or not players can manually detonate time bombs attached by this weapon. Defaults to [CombatDamage]\u25baCanDetonateTimeBomb."},
		{"Key": "IvanBomb.CanDetonateDeathBomb", "Description": "(boolean) Whether or not players can manually detonate death bombs attached by this weapon. Defaults to [CombatDamage]\u25baCanDetonateDeathBomb."},
		{"Key": "IvanBomb.DetonateOnSell", "Description": "(boolean) Whether attached bombs shall explode if the victim is sold. Otherwise, the bomb will just be disarmed. Defaults to yes."},
		{"Key": "IvanBomb.Detachable", "Description": "(boolean) Whether or not Engineers can remove this bomb from units it has been attached to. Defaults to yes."},
		{"Key": "IvanBomb.DestroysBridges", "Description": "(boolean) Whether or not this bomb can be used on Bridge Repair Huts in order to destroy the corresponding bridge. Defaults to yes. Note Bombs can always be attached to Bridge Repair Huts, but the resulting explosion will not destroy the bridge unless IvanBomb.DestroysBridges=yes is set."},
		{"Key": "IvanBomb.Image", "Description": "(filename, *excluding*the .shp extension) The SHP file for the image to display over a unit that has a bomb attached to them, in the format \u201cfilename\u201d(the \u201d.shp\u201d extension is automatically added by the engine). If the image cannot be loaded then the game will fall back to the default bombcurs.shp."},
		{"Key": "IvanBomb.FlickerRate", "Description": "(integer) The number of frames at which the bomb image will alternate between the two flickering images in a block to give the impression of a flickering fuse. If 0, flickering is disabled. Defaults to [CombatDamage]\u25baIvanIconFlickerRate. IvanBomb.FlickerRate=5 means the first frame is shown 5 frames, then the second one for 5 frames, then the first one again for 5 more frames,.... If flickering is disabled, all images in all blocks are played over the lifetime of the bomb. The second frame of each block is not ignored and it thus is not necessary to add an empty frame to fill up a block. Still, the logic only deals in full flickering image blocks and will ignore the last frame if the number of frames in the file is odd."},
		{"Key": "LaserThickness", "Description": "(integer) Enables the customization of laser widths."},
		{"Key": "ProjectileRange", "Description": "(float - cell range) The distance a Ranged=yes projectile is allowed to travel before running out of fuel and detonating. Defaults to 390."},
		{"Key": "Beam.Color", "Description": "(R,G,B) The color that the beam will be drawn in. Defaults to [AudioVisual]\u25baChronoBeamColor for weapons with a Temporal warhead, and [Radiation]\u25baRadColor for weapons with a non-Temporal warhead."},
		{"Key": "Beam.IsHouseColor", "Description": "(boolean) Whether or not the beam should be drawn using the firing unit\u2019s player color instead of the specific color specified by Beam.Color."},
		{"Key": "Beam.Duration", "Description": "(integer) The number of frames for which the beam should be visible. Default is 15 as per original RadBeams. The RadEruption effect originally used a random value between 5 and 20."},
		{"Key": "Beam.Amplitude", "Description": "(float) The amplitude of the beam (possibly measured in pixels?). Defaults to 40.0 as per original RadBeams. The RadEruption effect originally used a random value between 100.0 and 500.0."},
		{"Key": "IsDetachedRailgun", "Description": "(boolean) Whether this weapon is a railgun. Has the same particle effect as IsRailgun but does not have the limitation that the weapon cannot be fired again as long as the particle system created by firing the weapon previously subsided. Defaults to no. Note Combining IsDetachedRailgun=yes with IsRailgun=yes is not supported."},
		{"Key": "Wave.IsLaser", "Description": "(boolean) Should the Laser effect be applied to this weapon?"},
		{"Key": "Wave.IsBigLaser", "Description": "(boolean) Should the BigLaser effect be applied to this weapon?"},
		{"Key": "Wave.Color", "Description": "(3 integers) The value added to the color component of the wave independent of the original pixel color. Supports negative values to darken the wave. Default value is different depending on the type of the wave."},
		{"Key": "Wave.Intensity", "Description": "(3 integers) The value added to the color component of the wave with respect to the original pixel color. Supports negative values to darken the wave. 0,0,0 means no change by intensity. Default value is different depending on the type of the wave. If Wave.Color is set, the default is 0,0,0."},
		{"Key": "Wave.IsHouseColor", "Description": "(boolean) If this is set to yes then the wave will be drawn in the firing unit\u2019s house color instead of the color specified by Wave.Color."},
		{"Key": "Wave.ReverseAgainstVehicles", "Description": "(boolean) Whether or not the wave will be drawn from the target to the firer when the target is a VehicleType. Defaults to yes if IsMagBeam=yes is set on the weapon."},
		{"Key": "Wave.ReverseAgainstBuildings", "Description": "(boolean) Whether or not the wave will be drawn from the target to the firer when the target is a BuildingType."},
		{"Key": "Wave.ReverseAgainstInfantry", "Description": "(boolean) Whether or not the wave will be drawn from the target to the firer when the target is an InfantryType."},
		{"Key": "Wave.ReverseAgainstAircraft", "Description": "(boolean) Whether or not the wave will be drawn from the target to the firer when the target is an AircraftType."},
		{"Key": "Wave.ReverseAgainstOthers", "Description": "(boolean) Whether or not the wave will be drawn from target to firer when the target is anything not covered by the other ReverseAgainst flags (i.e. trees, overlays, empty cells, etc.)."},
		{"Key": "AmbientDamage", "Description": "(integer) How much damage the wave deals to objects it passes through. Defaults to zero."},
		{"Key": "Warhead", "Description": "(WarheadType) The warhead used to deal ambient damage as well as normal damage."}
	],

	"Warheads": [
		{"Key": "Versus.magic", "Description": "(float - modifier) Sets the efficiency of this warhead against the armor called magic."},
		{"Key": "Versus.magic.ForceFire", "Description": "(boolean) Whether or not this warhead is allowed to be force-fired on the magic ArmorType."},
		{"Key": "Versus.steel.Retaliate", "Description": "(boolean) Whether or not this warhead is allowed to be used in retaliation against the steel ArmorType."},
		{"Key": "Versus.clingfilm.PassiveAcquire", "Description": "(boolean) Whether or not this warhead is allowed to be used to attack the clingfilm ArmorType automatically."},
		{"Key": "AttachEffect.Cumulative", "Description": "(boolean) If set to yes, an unlimited amount of this type of AttachEffect from this warhead can be applied to the target (it is stackable). If no, only one instance of this type of the AttachEffect can be on a single unit and that one instance gets updated if it is to be applied again. Defaults to no."},
		{"Key": "AttachEffect.AnimResetOnReapply", "Description": "(boolean) If this type of AttachEffect is not stackable, enabling this flag resets the animation on every time of reapplying. Defaults to no."},
		{"Key": "KillDriver", "Description": "(boolean) Specifies whether this warhead kills the driver of the vehicle, instead of damaging the vehicle itself. The first passenger matching the vehicle\u2019s Operator is considered the driver. All other passengers will be ejected. Defaults to no."},
		{"Key": "KillDriver.Owner", "Description": "(enumeration - civilian,special,neutral) Specifies the house the units are assigned to. Defaults to special."},
		{"Key": "KillDriver.KillBelowPercent", "Description": "(float) Specifies the percentage of health a unit cannot exceed to have its driver killed by a KillDriver=yes warhead. A unit above this health level is only damaged and the driver is not killed. Defaults to 100%."},
		{"Key": "KillDriver.Chance", "Description": "(float - percentage) Specifies the chance that a unit hit by a KillDriver=yes warhead will have its driver killed. Defaults to 100%."},
		{"Key": "KillDriver.RemoveVeterancy", "Description": "(boolean) Whether a unit will revert to rookie rank when the driver is killed and the unit changes owner. Not applied if the owner does not change. Defaults to no."},
		{"Key": "CellSpread.MaxAffect", "Description": "(integer) The number of times an object can be affected at most when hit by a warhead using CellSpread. Set this to 1 to make the same object not be hit not more than once. Defaults to -1 (infinite)."},
		{"Key": "Culling.EliteBelowHealth", "Description": "(integer - percentage) The health a victim unit must fall below to be culled by a hit using this warhead. Use 1 to 100 to represent percentages of full health; use 0, -1, and -2 to represent health states critical/red, damaged/yellow, and healthy/green respectively. Requires Culling=yes. Defaults to 0 for Culling.RookieBelowHealth and Culling.VeteranBelowHealth, to -1 for Culling.EliteBelowHealth. The default is the behavior of parasites with Culling=yes : They cull units with critical health if the firer is rookie or veteran, and also cull damaged units (yellow) if firer is elite."},
		{"Key": "Culling.EliteChance", "Description": "(integer - percentage) The chance that a cullable unit is actually culled by a hit using this warhead. Requires Culling=yes. Defaults to 100 (always). Use Culling.Chance to set the chance for all veterancy levels. Note This chance is applied every time damage is dealt using this warhead, not once per victim. That means with 70 there is a 70% chance of culling on the first hit, and a 91% chance of culling the unit on the second hit."},
		{"Key": "DamageAirThreshold", "Description": "(integer - leptons) If the warhead detonates more than this many leptons above the ground, units in the air will be affected. Otherwise, units in the air are not damaged. Defaults to 0. Quickstart Use -1 to damage even air units when the warhead detonates on the ground, or a high positive value like 9999 to disable damaging air units despite the warhead detonating in air."},
		{"Key": "DeathWeapon.Suppress", "Description": "When this warhead causes the death of a unit from this list, its death weapon will not fire.", "LookupType": "TechnoTypes", "MultipleValues": true},
		{"Key": "DeathWeapon.SuppressVehicles", "Description": "(boolean) Whether death weapons of all VehicleTypes are suppressed when this warhead kills. If no, DeathWeapon.Suppress is still checked. Defaults to no."},
		{"Key": "DeathWeapon.SuppressInfantry", "Description": "(boolean) Whether death weapons of all InfantryTypes are suppressed when this warhead kills. If no, DeathWeapon.Suppress is still checked. Defaults to no."},
		{"Key": "DieSound.Override", "Description": "(soundmd entry) The sound to use when an object is destroyed by this warhead. Objects that have no DieSound will not play anything. Use <none> to suppress DieSound."},
		{"Key": "VoiceDie.Override", "Description": "(soundmd entry) The voice to use when an object is destroyed by this warhead. Objects that have no VoiceDie will not play anything. Use <none> to suppress VoiceDie."},
		{"Key": "DisableWeapons.Duration", "Description": "(integer - frames) If positive, the target hit by this warhead will be unable to fire for this amount of frames. Defaults to 0."},
		{"Key": "Flash.Duration", "Description": "(integer - frames) If positive, the victim hit by this warhead will flash for the specified amount of frames. Defaults to 0."},
		{"Key": "AffectsEnemies", "Description": "(boolean) Specifies whether or not this warhead can damage enemy units. This has no effect on the warhead\u2019s ability to target enemy units. A counterpart to the existing AffectsAllies flag."},
		{"Key": "AffectsOwner", "Description": "(boolean) Whether this warhead can affect the very player who fired it. Defaults to AffectsAllies flag."},
		{"Key": "EffectsRequireDamage", "Description": "(boolean) Whether warheads will only apply the effects if at least one hitpoint of damage has actually been dealt to a unit or structure. If no, effects are also applied if the no damage is dealt. Requires positive damage; healing does not use this setting. Defaults to no."},
		{"Key": "EffectsRequireVerses", "Description": "(boolean) Whether Verses needs to be greater than 0% for the warhead to apply effects. Can be used to distinguish between 0% and greater verses that potentially nullify damage, between immunity and vulnerability. If no, effects are applied to any unit or structure regardless of verses. Defaults to yes."},
		{"Key": "AllowZeroDamage", "Description": "(boolean) Whether damage of 0 hitpoints will still be passed on to all units and structures affected by the warhead. Otherwise, a damage of 0 will not be passed on. Defaults to no."},
		{"Key": "Malicious", "Description": "(boolean) Specifies whether or not EVA should notify an ore miner\u2019s owner of an attack ( EVA_OreMinerUnderAttack ). No other EVA messages are suppressed. For example, if a warhead\u2019s purpose is to spread ore dealing damage as a side effect only you can use Malicious=no to disable unreasonable EVA attack warnings for ore miners. Defaults to yes."},
		{"Key": "PreventScatter", "Description": "(boolean) Whether units should not scatter when attacked with this warhead even if they have the ability to. Defaults to no."},
		{"Key": "Damage.Deployed", "Description": "(float - multiplier) A multiplier applied to Damage if the InfantryType receiving it is currently deployed."},
		{"Key": "InfDeathAnim", "Description": "(string, animation ID) Specifies the animation to display when an InfantryType (with NotHuman=no ) is killed by this warhead. Works in the same way as existing InfDeath animations except this flag allows you to specify an animation ID rather than an integer. Furthermore, the animation will be treated as the correct type (e.g. mutation or non-mutation) automatically, which means that you can now have any number of mutations that produce player-owned InfantryTypes. See MakeInfantryOwner for how to control which player will gain control of \u2018mutated\u2019 infantry."},
		{"Key": "IonCannon", "Description": "(boolean) Whether Ion Cannon logic will be activated when this warhead impacts. Defaults to no."},
		{"Key": "IonCannon.Blast", "Description": "The optional first animation on the impact site. This is only used if the warhead impacts on land. If the impact site is on water, the last animation from the [CombatDamage]\u25baSplashList is used. Set to none to deactivate. Defaults to [General]\u25baIonBlast.", "LookupType": "Animation"},
		{"Key": "IonCannon.Beam", "Description": "The optional second animation on the impact site. Set to none to deactivate. Defaults to [General]\u25baIonBeam.", "LookupType": "Animation"},
		{"Key": "IonCannon.Warhead", "Description": "The optional warhead to deliver the damage. Set to none to deal no Ion Cannon damage. Defaults to [CombatDamage]\u25baIonCannonWarhead.", "LookupType": "Warhead"},
		{"Key": "IonCannon.Damage", "Description": "(integer - hitpoints) The damage dealt by the Ion Cannon warhead. Defaults to [CombatDamage]\u25baIonCannonDamage."},
		{"Key": "IonCannon.Rock", "Description": "(boolean) Whether voxel units are rocked by the impact. Defaults to yes."},
		{"Key": "IonCannon.Ripple", "Description": "(integer - frames) This generates a visual shockwave when the warhead detonates, identical to the one produced by Tiberian Sun \u2018s Ion Cannon. Note that this is a visual effect only. Valid values range from 0 (off) to 79 (max effect). Defaults to 79 for IonCannon=yes, to 0 otherwise. Below are listed some results of modifying the tag values. IonCannon.Ripple=1 - Forget it, nothing. IonCannon.Ripple=5 - Target cell, only voxel rippling IonCannon.Ripple=8 - Target cell, both voxel and SHP rippling. IonCannon.Ripple=10 - 1 cell radius IonCannon.Ripple=15 - 2 cell radius IonCannon.Ripple=20 - 3 cell radius IonCannon.Ripple=25 - 3 cell radius IonCannon.Ripple=28 - 3 cell unit-rippling, 4 cell terrain rippling radius IonCannon.Ripple=30 and onwards - 3 cell unit-rippling, 5 cell terrain-rippling radius"},
		{"Key": "BridgeAbsoluteDestroyer", "Description": "(boolean) Whether this warhead immediately destroys a bridge it hits. Requires Wall=yes. Defaults to yes for [CombatDamage]\u25baIonCannonWarhead, to no otherwise."},
		{"Key": "IronCurtain.Duration", "Description": "(integer - frames) If positive, endows the target unit with the Iron Curtain effect for the specified number of frames. If negative, the Iron Curtain effect duration will be reduced by this number of frames. Use IronCurtain.Cap= below to have the effect duration be cumulative rather than absolute. IronCurtain.Duration defaults to 0 (no Iron Curtain effect)."},
		{"Key": "IronCurtain.Cap", "Description": "(integer) If this value is negative the IronCurtain.Duration is absolute and will not stack up if a target is fired upon multiple times. If this value is 0 the effect duration can stack up indefinitely. Otherwise the Iron Curtain effect cannot stack up to durations longer than this value \u2013 except for when a unit\u2019s duration already is higher and IronCurtain.Duration isn\u2019t negative (the duration will not be decreased, then). IronCurtain.Cap defaults to -1 (non-stacking, absolute duration)."},
		{"Key": "IronCurtain.Flash", "Description": "(boolean) Whether units and structures will emit a black or blue flash when hit with this warhead while under the effect of an Iron Curtain or Force Shield respectively. Defaults to [AudioVisual]\u25baIronCurtainFlash."},
		{"Key": "MindControl.Permanent", "Description": "(boolean) If the warhead has MindControl.Permanent=yes set as well as MindControl=yes set then the mind-control will be permanent."},
		{"Key": "NukeFlash.Duration", "Description": "(integer - frames) The number of frames the nuke flash fades in and stays fully active before it fades out again. A value of 0 disables the effect. Defaults to 30 for NUKE, to 0 otherwise."},
		{"Key": "PreImpactAnim", "Description": "(animation) Specifies the animation to display when a projectile which uses this warhead impacts. After the animation is over, the actual explosion is created and damage is dealt. The animation may not be looping. Defaults to NUKEBALL for NUKE, otherwise to none."},
		{"Key": "PreImpactAnim.Moves", "Description": "(boolean) Can be used to optionally move the bullet when the animation used as PreImpactAnim moves while playing. If yes, moves the bullet to the last location of the animation and sets the target to the cell containing the animation. Defaults to no."},
		{"Key": "RelativeDamage", "Description": "(boolean) Deal damage relative to Strength or current health instead of dealing conventional damage. If set to yes, the tags below are used depending on target type. If a tag is not defined, no damage is dealt. Defaults to no. Note A dummy Damage is needed on this warhead for targeting, even though the value ultimately is not used. If Damage is negative (like for healing weapons), the Relative Damage will be negative also."},
		{"Key": "RelativeDamage.Terrain", "Description": "(integer - percent) The damage defined as percentage from either Strength, if positive, or current health, if negative. Supported values range from -100 to 100. A value of 0 deals no damage. Defaults to 0."},
		{"Key": "Sonar.Duration", "Description": "(integer - frames) If set to a positive value, defines the number of frames the target unit hit by this warhead will not be able to cloak for. Defaults to 0."},
		{"Key": "Temporal.WarpAway", "Description": "(animation) If set, specifies the animation to be played when this warhead erases an object. Defaults to [General]\u25baWarpAway."},
		{"Key": "Temporal.HealthFactor", "Description": "(float - multiplier) How much the health of the victim is factored in into the remaining warp value of the target. Valid values range from 0.0 to 1.0 inclusive. 0.0 means health plays no role. 1.0 means the remaining warp is reduced proportionally to the target\u2019s health, down to 0. Defaults to 0.0. Note Another way to look at it is that the remaining warp value is linearly decreased from full for completely healthy targets down by this value for a target that has no health left."},
		{"Key": "UnitLost.Suppress", "Description": "(boolean) Whether units killed by this warhead should not play the Unit Lost EVA message. Damaging  units without killing them using this warhead will not silence the message. Defaults to no."},
		{"Key": "EMP.Duration", "Description": "(integer - frames) Defaults to 0."},
		{"Key": "EMP.Cap", "Description": "(integer - frames) Defaults to -1."},
		{"Key": "EMP.Sparkles", "Description": "(animation) If set, overrides the default animation to be played on the unit or structure under EMP. This only applies if the object does not already have an EMP animation."}
	],

	"SuperWeaponsGeneral": [
	],

	"SuperWeapons": [
		{"Key": "SidebarPalette", "Description": "(filename, *including* the .pal extension) Specifies the palette to use for the super weapon\u2019s SidebarImage, in the format \u201cfilename.pal\u201d. Defaults to cameo.pal."},
		{"Key": "SidebarPCX", "Description": "(filename, *including* the .pcx extension) Specifies the filename containing the superweapon\u2019s cameo, in the format \u201cfilename.pcx\u201d."},
		{"Key": "SW.Animation", "Description": "(animation) The animation to display at the super weapon\u2019s target cell."},
		{"Key": "SW.AnimationHeight", "Description": "(integer) How high above the target cell to display the animation."},
		{"Key": "SW.AnimationVisibility", "Description": "(enumeration none|owner|allies|team|enemies|all) Defines who will see this animation."},
		{"Key": "SW.Sound", "Description": "(sound) The sound to play at the super weapon\u2019s target cell."},
		{"Key": "SW.ActivationSound", "Description": "(sound) The sound to play when a Nuke is fired or a deferrable super weapon like the Lightning Storm is activated. The sound is usually played at the target location."},
		{"Key": "SW.RequiredHouses", "Description": "(HouseTypes) Specifies the houses that have access to this super weapon. All other houses are forbidden from using it, and it will not become available for them. Defaults to all houses."},
		{"Key": "SW.ForbiddenHouses", "Description": "(HouseTypes) Specifies the houses that can never obtain this super weapon. All other houses are not denied access to it, but they also have to satisfy the SW.RequiredHouses settings for it to become available. Defaults to none."},
		{"Key": "SW.AuxBuildings", "Description": "Specifies the auxiliary buildings without which this super weapon cannot become available. The player has to own at least one building of any of these types to get access to this super weapon. Defaults to none. Note Use this instead of the original AuxBuilding tag if you want to have multiple auxiliary buildings.", "LookupType": "BuildingTypes", "MultipleValues": true},
		{"Key": "SW.NegBuildings", "Description": "Specifies the negative auxiliary buildings whose presence will cause the super weapon to become unavailable. This super weapon can become available only if the player does not own any building of any of these types. Defaults to none.", "LookupType": "BuildingTypes", "MultipleValues": true},
		{"Key": "SW.AllowPlayer", "Description": "(boolean) Whether this super weapon will be available to human players. Defaults to yes."},
		{"Key": "SW.AllowAI", "Description": "(boolean) Whether this super weapon will be available to AI players. Defaults to yes."},
		{"Key": "SW.Shots", "Description": "(integer) How often this super weapon is allowed to fire before becoming unavailable. Use -1 to allow unlimited firing. Is not supported for Charge Drain super weapons. Defaults to -1."},
		{"Key": "SW.AlwaysGranted", "Description": "(boolean) Whether this super weapon is not provided by any particular building but is instead always available as long as the player has not been defeated. Defaults to no."},
		{"Key": "Text.Hold", "Description": "(CSF label) Overlay displayed in case this super weapon is powered and can\u2019t currently charge because the building is shut down."},
		{"Key": "Text.Ready", "Description": "(CSF label) Overlay displayed in case this super weapon is fully charged and ready to be launched."},
		{"Key": "Text.Charging", "Description": "(CSF label) Overlay displayed in case this super weapon has UseChargeDrain=yes set and can be fired, but it isn\u2019t fully charged yet."},
		{"Key": "Text.Active", "Description": "(CSF label) Overlay displayed in case this super weapon has UseChargeDrain=yes set and is currently enabled and draining."},
		{"Key": "Text.Preparing", "Description": "(CSF label) Overlay displayed in case none of the above texts are shown for this super weapon. That is, for example, charging for super weapons not using charge drain."},
		{"Key": "SW.ChargeToDrainRatio", "Description": "(float multiplier) The recharge time multiplied by this value is how long the super weapon will stay active. Must not be 0. Defaults to [General]\u25baChargeToDrainRatio."},
		{"Key": "SW.Unstoppable", "Description": "(boolean) Whether this super weapon can be stopped when active. Otherwise clicks on the super weapon\u2019s cameo are ignored. Defaults to no."},
		{"Key": "Money.Amount", "Description": "(integer - credits) This many credits are added to the firing player\u2019s account when the super weapon is fired. Use a negative number to subtract credits. Defaults to 0."},
		{"Key": "Money.DrainAmount", "Description": "(integer - credits) This many credits are added to the firing player\u2019s account when a UseChargeDrain=yes super weapon is active. Use a negative number to subtract credits. Defaults to 0."},
		{"Key": "Money.DrainDelay", "Description": "(integer - frames) After this many frames the credits defined in Money.DrainAmount= are added to the firing player\u2019s account when a UseChargeDrain=yes super weapon is active. Defaults to 0."},
		{"Key": "Cursor", "Description": "(mouse cursor) Cursor to use when it is ok to fire the super weapon at the given location. Defaults to Attack, if not stated otherwise."},
		{"Key": "NoCursor", "Description": "(mouse cursor) Cursor to use when the super weapon is not allowed to fire at the given location. This may be because the selected target is not of the required type or its owner is not allowed, or the target is out of range, or there is no designator nearby. Defaults to Disallowed, if not stated otherwise."},
		{"Key": "EVA.Detected", "Description": "(EVA event) The EVA event that will be triggered when the super weapon building is constructed (the EVA event is not played for the owner of the building)."},
		{"Key": "EVA.Ready", "Description": "(EVA event) The EVA event that will be triggered when the super weapon is ready to fire (the EVA event is only played for the owner of the super weapon)."},
		{"Key": "EVA.Activated", "Description": "(EVA event) The EVA event that will be triggered when the super weapon is fired."},
		{"Key": "EVA.Impatient", "Description": "(EVA event) The EVA event that will be triggered when a super weapon cameo is clicked but isn\u2019t ready to fire yet."},
		{"Key": "EVA.InsufficientFunds", "Description": "(EVA event) The EVA event that will be triggered when a super weapon can\u2019t be fired because the player doesn\u2019t have enough money. Defaults to EVA_InsufficientFunds."},
		{"Key": "EVA.SelectTarget", "Description": "(EVA event) The EVA event that will be triggered when the super weapon cameo is clicked in the sidebar and the player is required to select a target."},
		{"Key": "SW.Range", "Description": "(float,integer) Most superweapons having a ranged effect can take a float or two integers. One float is taken as radius around the target cell, two integers separated by comma denote a rectangular area. For example, SW.Range=3.5 defines a circle with 7 cells diameter, SW.Range=4,6 defines a rectangle 4 cells wide and 6 cells high. The range is no longer bound to cell spread\u2019s limitation of a maximum range of 10."},
		{"Key": "SW.Deferment", "Description": "(integer - frames) The number of frames after the fired super weapon takes effect. Not all super weapons support deferment."},
		{"Key": "SW.CreateRadarEvent", "Description": "(boolean) Creates a radar event rectangle for every player centered above the super weapon\u2019s target cell."},
		{"Key": "SW.ShowCameo", "Description": "(boolean) Sets whether this super weapon will appear in the side bar. This setting is ignored if SW.AutoFire=no is set. Defaults to yes."},
		{"Key": "SW.TimerVisibility", "Description": "(enumeration none|owner|allies|team|enemies|all) Defines who can see the super weapon timer, if ShowTimer=yes. Observers are considered to be allied to all players. Defaults to all."},
		{"Key": "SW.Group", "Description": "(integer) Distinguish multiple super weapons of the same type. Defaults to 0."},
		{"Key": "SW.AffectsHouse", "Description": "(enumeration none|owner|allies|team|enemies|all) Which houses items are affected by this super weapon. You can combine multiple values by comma. team equals owner,allies, and all equals owner,allies,enemies. Defaults to team for the Force Shield, to all otherwise."},
		{"Key": "SW.AffectsTarget", "Description": "(enumeration none|land|water|empty|infantry|units|buildings) Which items are allowed to be affected by this super weapon. You can combine multiple values by comma. If you don\u2019t specify either land or water, both will be allowed. If you don\u2019t specify any of the other values, everything can be affected. Thus, if you specify no restriction ( none ), all targets are valid. For example, SW.AffectsTarget=land,buildings affects all buildings that aren\u2019t water-bound, SW.AffectsTarget=water affects every water cell, occupied or empty."},
		{"Key": "SW.InitialReady", "Description": "(boolean) Whether the first super weapon of this type will be ready to fire immediately after the super weapon becomes available. Once the super weapon has been fired once, it will recharge normally. Defaults to no."},
		{"Key": "SW.VirtualCharge", "Description": "(boolean) Once the super weapon becomes available, it will charge continuously, even if the the owning player loses all buildings that provide it. The super weapon will continue to charge in the background or outside the map. When the cameo is removed and added again, the super weapon will appear with the cameo charge already partially progressed instead of restarting to charge. Defaults to no. Note Virtual charge is not supported on UseChargeDrain=yes super weapons."},
		{"Key": "SW.PostDependent", "Description": "The super weapon invoked right after firing this super weapon. As in Red Alert 2 the only super weapon using this is the ChronoSphere invoking the ChronoWarp. To distinguish between multiple of such super weapons you can provide the specific super weapon ID here. For example, [ChronoSphereSpecial]\u25baSW.PostDependent=ChronoWarpSpecial switches to the ChronoWarp type super weapon after you chose the source location.", "LookupType": "SuperWeapon"},
		{"Key": "Light.Enabled", "Description": "(boolean) Whether the lighting gets respected or not. Currently only the primary super weapons support lighting changes."},
		{"Key": "Light.Ambient", "Description": "(integer) The brightness of the environment. Too high values will cause a slow-down."},
		{"Key": "Light.Red", "Description": "(integer) The red component of the lighting."},
		{"Key": "Light.Green", "Description": "(integer) The green component of the lighting."},
		{"Key": "Light.Blue", "Description": "(integer) The blue component of the lighting."},
		{"Key": "Message.Detected", "Description": "(CSF label) Message displayed to every player the moment the super weapon building is detected."},
		{"Key": "Message.Ready", "Description": "(CSF label) Message displayed to the firing player when the super weapon becomes ready to launch."},
		{"Key": "Message.Launch", "Description": "(CSF label) Message displayed to every player the moment the super weapon is launched."},
		{"Key": "Message.Activate", "Description": "(CSF label) Message displayed to every player the moment a deferrable super weapon is activated."},
		{"Key": "Message.Abort", "Description": "(CSF label) Message displayed to the firing player if the super weapon cannot be fired right now because another super weapon is active."},
		{"Key": "Message.InsufficientFunds", "Description": "(CSF label) Message displayed if the firing player doesn\u2019t have enough money to launch this super weapon."},
		{"Key": "Message.CannotFire", "Description": "(CSF label) Message displayed to the owning player if firing a super weapon using AITargeting fails. Defaults to MSG:CannotFire."},
		{"Key": "Message.FirerColor", "Description": "(boolean) Messages are displayed in the firing house\u2019s color scheme. Defaults to no."},
		{"Key": "Message.Color", "Description": "(Color scheme) If set, messages are always displayed in this color scheme instead of the player\u2019s color scheme. This is not respected if Message.FirerColor=yes is set."},
		{"Key": "SW.RangeMaximum", "Description": "(float - cell range) Distance in cells the target coordinates may be away from a player\u2019s building providing this super weapon. Values below 0.0 mean type-specific default, which usually disables this range check. Defaults to -1.0."},
		{"Key": "SW.RangeMinimum", "Description": "(float - cell range) Distance in cells the target coordinates must be away from a player\u2019s building providing this super weapon. Values below 0.0 mean type-specific default, which usually disables this range check. Defaults to -1.0."},
		{"Key": "SW.Designators", "Description": "List of units and structures eligible for designating the target location. An empty list requires no designator. Defaults to none.", "LookupType": "TechnoTypes", "MultipleValues": true},
		{"Key": "SW.AnyDesignator", "Description": "(boolean) Whether any unit or structure is considered a valid designator for this super weapon. Overrides SW.Designators. Defaults to no."},
		{"Key": "SW.Inhibitors", "Description": "List of units and structures preventing this super weapon from firing close to any of them. An empty list means no inhibitors. Defaults to none.", "LookupType": "TechnoTypes", "MultipleValues": true},
		{"Key": "SW.AnyInhibitor", "Description": "(boolean) Whether any unit or structure is considered a valid inhibitor for this super weapon. Overrides SW.Inhibitors. Defaults to no."},
		{"Key": "SW.UseAITargeting", "Description": "(boolean) Whether AI targeting will decide the target used when firing this super weapon. If yes, clicking the cameo will not allow manual target selection and instead fire the super weapon at an automatically determined location. Defaults to no. All applicable AI targeting constraints have to be satisfied for the super weapon to fire and actually discharge. If the constraints are not satisfied, the cameo will be darkened. If the player tries to fire the super weapon anyhow, the message Message.CannotFire is displayed."},
		{"Key": "SW.AutoFire", "Description": "(boolean) Sets whether this super weapon will be launched automatically once ready even for human players. If set to yes, the AI targeting options are used to infer the target cell. Defaults to no."},
		{"Key": "SW.ManualFire", "Description": "(boolean) Sets whether this super weapon can be manually fired by the owning player. If set to no, the player will not be able to get a selection cursor for this super weapon when clicking the cameo. This setting is ignored if SW.AutoFire=no is set, because the player would have no way to fire this super weapon. Defaults to yes. Note You can use this on auto-firing super weapons where the targeting mode might prevent it from being fired (like the Lightning Storm or Psychic Dominator, if another super weapon of this type is currently active)."},
		{"Key": "SW.FireIntoShroud", "Description": "(boolean) Whether or not this super weapon is allowed to fire into an unexplored area of the map. Default is yes."},
		{"Key": "SW.RequiresTarget", "Description": "(enumeration none|land|water|empty|infantry|units|buildings) Which items this super weapon can fire at. Hovering above an allowed item will show the Cursor, otherwise the player gets the NoCursor and it is not possible to launch the super weapon. For an example see SW.AffectsTarget=. Note Please be aware of the problems that can arise if this and SW.AffectsTarget= are set to mutually exclusive values not allowing the super weapon to affect anything."},
		{"Key": "SW.RequiresHouse", "Description": "(enumeration none|owner|allies|team|enemies|all) Which house\u2019s items this super weapon can fire at."},
		{"Key": "SW.AITargeting", "Description": "(enumeration SW Targeting Type) Select one of the following values to define how the AI will use this super weapon:"},
		{"Key": "SW.AIRequiresTarget", "Description": "(enumeration none|land|water|empty|infantry|units|buildings|all) Specifies which targets will be considered eligible by AI players or human owned automatically fired super weapons. The default value depends on the SW.AITargeting setting. See the table below."},
		{"Key": "SW.AIRequiresHouse", "Description": "(enumeration owner|allies|team|enemies|others|all) Specifies which houses will be considered eligible by AI players or human owned automatically fired super weapons. The default value depends on the SW.AITargeting setting. See the table below."},
		{"Key": "SW.AITargeting.Constraints", "Description": "(enumeration SW Targeting Constraints) A comma-separated list of constraints that all have to be satisfied for the super weapon to fire. Defaults depend on the Type=."},
		{"Key": "SW.AITargeting.Preference", "Description": "(enumeration SW Targeting Preference) The preference overrides the actual targeting. As long as these overrides are set, the super weapons will prefer these set targets. Defaults depend on the Type=."}
	],

	"ValueTypes": [
		{"ValueType": "ArmorTypes", "Values": "none,flak,plate,light,medium,heavy,wood,steel,concrete,special_1,special_2"}
	],

	"NewBuilding": [
	],

	"NewInfantry": [
	],

	"NewVehicle": [
	],

	"NewAircraft": [
	],

	"Section": [
		{"Key": "AttachEffect.Animation", "Description": "(AnimationType) The optional animation to play on the affected unit. The animation is attached to the unit and moves along with it. Defaults to none. The animation is removed when the unit is cloaked. The animation is recreated once the unit is uncloaked again. While cloaked, the AttachEffect is still applied, but the effects caused by the animation are not. Note The animation always loops until the effect subsides. LoopCount is ignored."},
		{"Key": "AttachEffect.Duration", "Description": "(integer - frames) The duration of the effect in frames. Use -1 for infinite duration. Defaults to 0."},
		{"Key": "AttachEffect.TemporalHidesAnim", "Description": "(boolean) Whether a TechnoType with this type of AttachEffect applied on it should remove the animation while being warped out by a Temporal=yes weapon. Otherwise the animation stays active and unaffected by the temporal weapon. Defaults to no."},
		{"Key": "AttachEffect.SpeedMultiplier", "Description": "(float - multiplier) Speed bonus while the AttachEffect lasts. Defaults to 1.0."},
		{"Key": "AttachEffect.ArmorMultiplier", "Description": "(float - multiplier) Armor bonus while the AttachEffect lasts. Defaults to 1.0."},
		{"Key": "AttachEffect.FirepowerMultiplier", "Description": "(float - multiplier) Firepower bonus while the AttachEffect lasts. Defaults to 1.0. Note Mind that this works fundamentally differently from the other effects, which are applied the instant they are needed (like a firepower for a bullet impacting) as long as the effect is active: the reload time is computed once when the reloading starts, but the modified reloading time may take longer than the attached effect lasts. For instance, a unit that was struck with an effect slowing down the ROF extremely might thus render the unit unable to fire way longer than the AttachEffect is active, because the reload timer will not speed up again when the effect expires."},
		{"Key": "AttachEffect.ROFMultiplier", "Description": "(float - multiplier) Rate of fire bonus while the AttachEffect lasts. Defaults to 1.0."},
		{"Key": "AttachEffect.Cloakable", "Description": "(boolean) Whether the unit gains cloaking ability while the AttachEffect lasts. Defaults to no."},
		{"Key": "AttachEffect.ForceDecloak", "Description": "(boolean) Whether affected units will be forced to decloak when the AttachEffect gets applied (useful for non-damaging anim-based AttachEffects). Defaults to no."},
		{"Key": "AttachEffect.DiscardOnEntry", "Description": "(boolean) Whether the AttachEffect will be removed when the affected unit is removed from the map (entering a building or another unit). Defaults to no."},
		{"Key": "AttachEffect.PenetratesIronCurtain", "Description": "(boolean) Whether the AttachEffect can attach to a unit or structure under the influence of an Iron Curtain or Force Shield. Defaults to no."}
	],

	"AudioVisual": [
		{"Key": "BountyDisplay", "Description": "(boolean) Whether enemy units and structures will display the amount of bounty awarded when destroyed by an object of this type. Defaults to no."},
		{"Key": "DeactivateDimEMP", "Description": "(float - multiplier) The light level for voxel units under EMP. See EMP logic. Defaults to 0.8."},
		{"Key": "DeactivateDimOperator", "Description": "(float - multiplier) The light level for unoperated voxel units. See Operator logic. Defaults to 0.65."},
		{"Key": "DeactivateDimPowered", "Description": "(float - multiplier) The light level for unpowered voxel units. See PoweredBy logic. Defaults to 0.5."},
		{"Key": "DiskLaserAnimEnabled", "Description": "(boolean) Whether Disk Lasers should display an animation from their warhead\u2019s AnimList. Defaults to no."},
		{"Key": "InfantryElectrocuted", "Description": "(animation) If InfantryElectrocuted is not defined then the game will search for an animation named ELECTRO, before finally falling back to the second animation like before."},
		{"Key": "VeteranFlashTimer", "Description": "(integer - frames) The number of frames a newly veteran unit or structure will flash for. Defaults to 0."},
		{"Key": "StealthSpeakDelay", "Description": "(double - minutes) Minutes between EVA repeating the warning that a stealth unit has been detected. Defaults to 0.0."},
		{"Key": "SubterraneanSpeakDelay", "Description": "(double - minutes) Minutes between EVA repeating the warning that a subterranean unit has been detected. Defaults to 0.0."},
		{"Key": "DisplayCreditsDelay", "Description": "(double - minutes) The interval between two texts appearing to display how many credits a building produced. Until then, the amounts are collected to be displayed after the interval passed. Defaults to 0.02."},
		{"Key": "DecloakSound", "Description": "(Sound) The sound played when a unit or building decloaks. Defaults to [AudioVisual]\u25baCloakSound."},
		{"Key": "IronCurtainFlash", "Description": "(boolean) Whether units and structures will by default emit a black or blue flash when hit while under the effect of an Iron Curtain or Force Shield respectively. Defaults to yes."},
		{"Key": "FirestormActiveAnim", "Description": "(AnimationType) The optional animation played randomly on Firestorm Wall sections when active. This is drawn in the building\u2019s palette. Defaults to GAFSDF_A."},
		{"Key": "FirestormIdleAnim", "Description": "(AnimationType) The optional animation played randomly on Firestorm Wall sections when active. This is drawn in the building\u2019s palette. Defaults to FSIDLE."},
		{"Key": "FirestormGroundAnim", "Description": "(AnimationType) The animation to display when an active Firestorm Wall destroys an object on or close to the ground. This is drawn in the animation palette. Defaults to FSGRND."},
		{"Key": "FirestormAirAnim", "Description": "(AnimationType) The animation to display when an active Firestorm Wall destroys an object in the air. This is drawn in the animation palette. Defaults to FSAIR."}
	],

	"CombatDamage": [
		{"Key": "AutoRepel", "Description": "(boolean) Whether AI players will consider civilian units attacking allied objects as enemy when auto-acquiring targets. This makes units nearby help protect against an offender. Otherwise, only the attacked unit retaliates. Defaults to no."},
		{"Key": "PlayerAutoRepel", "Description": "(boolean) Whether human players will consider civilian units attacking allied objects as enemy when auto-acquiring targets. This makes units nearby help protect against an offender. Otherwise, only the attacked unit retaliates. Defaults to no."},
		{"Key": "AlliedSolidTransparency", "Description": "(boolean) Whether buildings of allied players are considered transparent for firing through them even if solid. If yes, owning players and their allies can fire through a building without the bullet hitting it. Defaults to no."},
		{"Key": "TiberiumExplosive", "Description": "(boolean) Whether tiberium inside of harvester units explodes using TiberiumExplosiveWarhead when destroyed. Defaults to no."},
		{"Key": "TiberiumExplosiveWarhead", "Description": "(warhead) The warhead to deliver the damage of explosive tiberium. Defaults to none."},
		{"Key": "TiberiumExplosiveAnim", "Description": "(animation) Optional animation displayed when Tiberium contained in a unit explodes. Can be used independently of damage delivery; TiberiumExplosiveWarhead needs not be set. Defaults to none."},
		{"Key": "BerserkROFMultiplier", "Description": "(float - multiplier) The multiplier applied to the reloading time when a unit is berserking. Smaller means shorter reloading and faster firing. Defaults to 0.5."},
		{"Key": "EMPAIRecoverMission", "Description": "(mission) The mission units controlled by the AI will go onto when an EMP effect expires. Defaults to Hunt."},
		{"Key": "FirestormWarhead", "Description": "The warhead used by active Firestorm Walls to destroy objects. Cannot be none. Defaults to [General]\u25baC4Warhead.", "LookupType": "Warhead"}
	],

	"CrateRules": [
		{"Key": "RandomCrateMoney", "Description": "(integer - credits) A random money amount between 0 and this value is added on money crate bonuses. To make the granted money amount deterministic, set this to 0. Defaults to 900."}
	],

	"SpecialWeapons": [
		{"Key": "HSBuilding", "Description": "Buildings that can launch Hunter Seekers. BuildingTypes in this list do not have to provide the Hunter Seeker super weapon. Either this or the corresponding tag on the super weapon have to be set. If the player does not own any building from this list, the super weapon will discharge without a Hunter Seeker being launched. Defaults to none, Tiberian Sun uses GAPLUG,NATMPL.", "LookupType": "BuildingTypes", "MultipleValues": true}
	],

	"ParticleType": [
		{"Key": "DamageRange", "Description": "(double - cells) The particle damage is applied to all objects in this range around the gas particle. If less or equal to 0.0, all objects in the cell the gas particle is on are affected. Each object is affected at most once. Defaults to 0.0."},
		{"Key": "Palette", "Description": "(filename with .pal extension) The palette used to draw an image particle of this type. Defaults to ANIM.PAL."}
	],

	"AnimType": [
		{"Key": "SpawnsParticle.RangeMinimum", "Description": "(double - cells) The distance from the center where particles start spawning at. Defaults to 0.0. Note If negative, the resulting random distance could come out as negative. If this happens, the absolute value is used. This allows doubling the chance to spawn particles closer to the center."},
		{"Key": "SpawnsParticle.RangeMaximum", "Description": "(double - cells) The distance from the center where particles will not spawn beyond. Has to be equal to or larger than SpawnsParticle.RangeMinimum. Defaults to 0.0."}
	],

	"Unit": [
		{"Key": "Survivor.Pilots", "Description": "(integer) The number of pilots that will attempt to be spawned when this unit is destroyed (provided that the ground beneath the destroyed unit is clear). Defaults to 1 if the unit has Crewed=yes set, to 0 otherwise."},
		{"Key": "Survivor.ElitePilotChance", "Description": "(integer between 0 and 100) The percent chance that each individual pilot will be spawned when this unit is destroyed. If this value is negative, [General]\u25baCrewEscape will be used. Defaults to -1."},
		{"Key": "Survivor.ElitePassengerChance", "Description": "(integer between 0 and 100) Determines the percent chance that each of the unit\u2019s passengers (if any) will survive. Rookie/Veteran/Elite refer to the veteran level of the transport unit \u2013 a unit with a higher veteran level could be made to have a greater (or lesser) chance of allowing its passengers to survive. Passengers will be spawned in the cells around the destroyed unit and, so, if these cells are not clear then the passengers will not be spawned. These flags default to a special-case value of -1 which means \u201cuse the original game logic\u201d (i.e. land-based vehicles such as the Battle Fortress will eject their passengers but jumpjet vehicles such as the Nighthawk will not). Note that, for airborne vehicles such as the Nighthawk, there is no way to say \u201cpassengers can survive on the ground, but aren\u2019t allowed to paradrop from the air\u201d \u2013 if they can survive they can survive."}
	],

	"PrismForwarding.SupportWeapon": [
		{"Key": "Range", "Description": "(integer - cells) Specifies the maximum range over which the Prism Tower can support another. This does not affect the final firing range. -2 means infinite range. If no support weapon is specified then the default support range is the tower\u2019s Primary weapon range plus 1 cell (the extra cell ensures that placing a support tower within the attack radius circle of a firing tower guarantees that the support tower is within support range). This is different to the original game."},
		{"Key": "MinimumRange", "Description": "(integer - cells) Specifies the minimum range at which the Prism Tower can support another. This Prism Tower will not be able to support towers that are closer than MinimumRange. If no support weapon is specified then there is no minimum support range by default."},
		{"Key": "ROF", "Description": "(integer - frames) After a support tower has fired a support beam, it will be unable to fire at a target or support another Prism Tower for this many frames. If no support weapon is specified then the default duration is [General]\u25baPrismSupportDelay."},
		{"Key": "Report", "Description": "(sound) The sound to play when a Prism Tower fires a support beam. In the original game, the support beams did not cause a firing sound to be played. Note that lots of Prism Towers firing support beams at once may result in an annoying repetition or loud volume, so you may want to limit the number of instances of the sound and/or use a quieter or more subtle sound. If no support weapon is specified then there is no firing sound for the support beam by default."},
		{"Key": "IsLaser", "Description": "(boolean) Specifies whether or not a laser beam should be drawn when supporting another tower. The other laser controls ( LaserDuration, IsHouseColor, LaserInnerColor, LaserOuterColor, LaserOuterSpread and LaserThickness ) are also respected. If no support weapon is specified then the traditional support laser will be drawn ( IsLaser=yes, LaserDuration=[General]PrismSupportDuration, IsHouseColor=yes, LaserThickness=3 )."},
		{"Key": "IsElectricBolt", "Description": "(boolean) Specifies whether or not an electric bolt should be drawn when supporting another tower. The other electric bolt controls ( IsAlternateColor, Bolt.Color1, Bolt.Color2 and Bolt.Color3 ) are also respected. If no support weapon is specified then no electric bolt will be drawn."},
		{"Key": "IsRadBeam", "Description": "(boolean) Specifies whether or not a rad beam should be drawn when supporting another tower. The other rad beam controls ( Beam.Duration, Beam.IsHouseColor, Beam.Color and Beam.Amplitude ) are also respected. If no support weapon is specified then no rad beam will be drawn."}
	],

	"Boon": [
		{"Key": "SecretLab.RequiredHouses", "Description": "(countries) Specifies which countries are allowed to get this unit as a Secret Lab boon. Defaults to all houses."},
		{"Key": "SecretLab.ForbiddenHouses", "Description": "(countries) Specifies which countries are not allowed to get this unit as a Secret Lab boon. Defaults to none."}
	],

	"Projectiles": [
		{"Key": "SubjectToBuildings", "Description": "(boolean) Whether or not this projectile can be blocked by solid buildings. Defaults to no."},
		{"Key": "SolidLevel", "Description": "(integer) The highest level of solidity this projectile will consider as easily destructible when targeting. If a Solid Building with a solidity level of this or lower is in the way to the actual target, the unit will fire anyhow, first destroying all obstacles. If it is lower than the building\u2019s level, then the unit cannot fire and has to reposition itself. Defaults to 0. Note Certain drawing effects like lasers will be drawn as if they have hit the actual target when in fact the Solid Building was hit and took the damage. This graphical glitch might be resolved in the future."},
		{"Key": "SubjectToTrenches", "Description": "(boolean) Whether or not this projectile will override the normal UC.PassThrough chance on targeted buildings. If the projectile has SubjectToTrenches=no set, and the target building has UC.PassThrough set greater than zero, then the building will be treated as if it had UC.PassThrough=100%, when hit by this projectile. If SubjectToTrenches=yes is set (default), then the normal UC.PassThrough chance will be used when the building is hit by this projectile."},
		{"Key": "AnimLength", "Description": "(integer - frames) The number of frames the animation for each facing has. Playback speed is one frame every AnimRate frames. The animation is not guaranteed to play from the first frame on. Defaults to 1. Note AnimRate cannot be 0, or a division by zero will crash the game once a projectile of this type is fired."},
		{"Key": "AttachedSystem", "Description": "(ParticleSystemType) The type of the particle system to attach to this projectile. Only particle systems  with BehavesLike=smoke are supported."},
		{"Key": "BallisticScatter.Min", "Description": "(float - cell range) The minimum range in cells a projectile can scatter. Defaults to [CombatDamage]\u25baBallisticScatter / 2 if FlakScatter=no or Inviso=yes, to 0 otherwise."},
		{"Key": "BallisticScatter.Max", "Description": "(float - cell range) The maximum range in cells a projectile can scatter. Defaults to [CombatDamage]\u25baBallisticScatter."},
		{"Key": "Ranged", "Description": "(boolean) Whether this projectile can run out of fuel. Defaults to no."},
		{"Key": "Splits", "Description": "(boolean) Whether the projectile will split into a number of other projectiles defined by Cluster and AirburstWeapon. Can be combined with Airburst. Defaults to no."},
		{"Key": "RetargetAccuracy", "Description": "(float - percentage) The probability that a split cluster will aim for the same target the original projectile was shot at. The higher the value, the less likely it is for the split projectile to choose another target. Valid range is 0.0 to 1.0. Defaults to 0.0."},
		{"Key": "RetargetSelf", "Description": "(boolean) Whether the firing unit itself can become the target when retargeting. If no, the firer will be exempt, though could still be hit by a retargeted projectile that hits the cell the firer is on. Defaults to yes."},
		{"Key": "AirburstSpread", "Description": "(float - cell range) The range the airburst effect covers. Each cell in range will be targeted by the AirburstWeapon. Requires Airburst=yes. Cannot be combined with Splits=yes. Defaults to 1.5."},
		{"Key": "AroundTarget", "Description": "(boolean) Whether a projectile with Splits=yes or Airburst=yes should use the area around the original target to look for new targets for each cluster. If enabled, the clusters will continue their way to the originally intended target. Otherwise, the clusters will search for new targets in the area where the projectile split up. Defaults to Splits."}
	],

	"IQ": [
		{"Key": "TogglePower", "Description": "(integer) Defines the IQ rating with which an AI player will toggle power of buildings in low power situations. Values less than 0 deactivate this logic. Defaults to -1."}
	],

	"House": [
		{"Key": "Degrades", "Description": "(boolean) Whether buildings owned by this country degrade in low power situations. Only supported in single player missions. Defaults to [Country]\u25baDegrades."}
	],

	"TunnelType": [
		{"Key": "Passengers", "Description": "(integer) The maximum number of occupants this tunnel system can have. This does not consider size. Each unit takes up one slot of space. Defaults to 0."},
		{"Key": "MaxSize", "Description": "(double) The maximum Size= units can have to be allowed into this tunnel. Defaults to 0.0."}
	],

	"Tiberium": [
		{"Key": "ExplosionWarhead", "Description": "(warhead) The warhead used to deliver the damage of the chain reaction effect, as well as the damage of the Tiberium Explosion effect. Defaults to [General]\u25baC4Warhead. Note Tiberian Sun \u2018s C4Warhead was HE, which had Spread set. Red Alert 2 uses Super, which does not."},
		{"Key": "ExplosionDamage", "Description": "(integer) The damage an animation with TiberiumChainReaction=yes deals to the cell it impacts at. Defaults to [CombatDamage]\u25baTiberiumExplosionDamage."},
		{"Key": "Debris.Chance", "Description": "(integer - percent) The chance a cell containing this tiberium type hit by an animation with TiberiumChainReaction=yes will spawn one of its Debris. Defaults to 33."},
		{"Key": "Damage", "Description": "(integer) The damage a unit that is not tiberium proof receives from entering a cell containing this type of Tiberium. Defaults to Power / 10, but at least 1."},
		{"Key": "Warhead", "Description": "(warhead) The warhead that deals the Tiberium Damage. Defaults to [CombatDamage]\u25baC4Warhead. Note This is not used for the Tiberium Explosive feature."},
		{"Key": "Heal.Delay", "Description": "(float - minutes) The interval between healing steps being applied in minutes. Defaults to [General]\u25baTiberiumHeal."},
		{"Key": "Heal.Step", "Description": "(integer) The health to restore for AircraftTypes after each delay. Defaults to [General]\u25baRepairStep."},
		{"Key": "Heal.IStep", "Description": "(integer) The health to restore for InfantryTypes after each delay. Defaults to [General]\u25baIRepairStep."},
		{"Key": "Heal.UStep", "Description": "(integer) The health to restore for VehicleTypes after each delay. Defaults to [General]\u25baURepairStep."}
	],

	"UISettings": [
		{"Key": "AllowMultiEngineer", "Description": "(boolean) Specifies whether the user can turn the Multi Engineer feature on and off from the menu. Defaults to no. If the checkbox is not shown the settings in rulesmd.ini will be enforced. The checkbox uses GUI:MultiEngineer as its caption."}
	]

}